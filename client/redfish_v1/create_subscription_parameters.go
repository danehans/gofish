package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/danehans/gofish/models"
)

// NewCreateSubscriptionParams creates a new CreateSubscriptionParams object
// with the default values initialized.
func NewCreateSubscriptionParams() *CreateSubscriptionParams {
	var ()
	return &CreateSubscriptionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateSubscriptionParamsWithTimeout creates a new CreateSubscriptionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateSubscriptionParamsWithTimeout(timeout time.Duration) *CreateSubscriptionParams {
	var ()
	return &CreateSubscriptionParams{

		timeout: timeout,
	}
}

// NewCreateSubscriptionParamsWithContext creates a new CreateSubscriptionParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateSubscriptionParamsWithContext(ctx context.Context) *CreateSubscriptionParams {
	var ()
	return &CreateSubscriptionParams{

		Context: ctx,
	}
}

/*CreateSubscriptionParams contains all the parameters to send to the API endpoint
for the create subscription operation typically these are written to a http.Request
*/
type CreateSubscriptionParams struct {

	/*Payload*/
	Payload *models.EventDestination100EventDestination

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create subscription params
func (o *CreateSubscriptionParams) WithTimeout(timeout time.Duration) *CreateSubscriptionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create subscription params
func (o *CreateSubscriptionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create subscription params
func (o *CreateSubscriptionParams) WithContext(ctx context.Context) *CreateSubscriptionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create subscription params
func (o *CreateSubscriptionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithPayload adds the payload to the create subscription params
func (o *CreateSubscriptionParams) WithPayload(payload *models.EventDestination100EventDestination) *CreateSubscriptionParams {
	o.SetPayload(payload)
	return o
}

// SetPayload adds the payload to the create subscription params
func (o *CreateSubscriptionParams) SetPayload(payload *models.EventDestination100EventDestination) {
	o.Payload = payload
}

// WriteToRequest writes these params to a swagger request
func (o *CreateSubscriptionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Payload == nil {
		o.Payload = new(models.EventDestination100EventDestination)
	}

	if err := r.SetBodyParam(o.Payload); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
