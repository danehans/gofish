package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/danehans/gofish/models"
)

// CreateSubscriptionReader is a Reader for the CreateSubscription structure.
type CreateSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewCreateSubscriptionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateSubscriptionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateSubscriptionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateSubscriptionOK creates a CreateSubscriptionOK with default headers values
func NewCreateSubscriptionOK() *CreateSubscriptionOK {
	return &CreateSubscriptionOK{}
}

/*CreateSubscriptionOK handles this case with default header values.

Success
*/
type CreateSubscriptionOK struct {
	Payload *models.EventDestinationCollectionEventDestinationCollection
}

func (o *CreateSubscriptionOK) Error() string {
	return fmt.Sprintf("[POST /EventService/Subscriptions][%d] createSubscriptionOK  %+v", 200, o.Payload)
}

func (o *CreateSubscriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EventDestinationCollectionEventDestinationCollection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionUnauthorized creates a CreateSubscriptionUnauthorized with default headers values
func NewCreateSubscriptionUnauthorized() *CreateSubscriptionUnauthorized {
	return &CreateSubscriptionUnauthorized{}
}

/*CreateSubscriptionUnauthorized handles this case with default header values.

The authentication credentials included with this request are missing or invalid.

*/
type CreateSubscriptionUnauthorized struct {
}

func (o *CreateSubscriptionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /EventService/Subscriptions][%d] createSubscriptionUnauthorized ", 401)
}

func (o *CreateSubscriptionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateSubscriptionForbidden creates a CreateSubscriptionForbidden with default headers values
func NewCreateSubscriptionForbidden() *CreateSubscriptionForbidden {
	return &CreateSubscriptionForbidden{}
}

/*CreateSubscriptionForbidden handles this case with default header values.

The server recognized the credentials in the request, but those credentials do not possess authorization to perform this request.

*/
type CreateSubscriptionForbidden struct {
}

func (o *CreateSubscriptionForbidden) Error() string {
	return fmt.Sprintf("[POST /EventService/Subscriptions][%d] createSubscriptionForbidden ", 403)
}

func (o *CreateSubscriptionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateSubscriptionConflict creates a CreateSubscriptionConflict with default headers values
func NewCreateSubscriptionConflict() *CreateSubscriptionConflict {
	return &CreateSubscriptionConflict{}
}

/*CreateSubscriptionConflict handles this case with default header values.

The request could not be completed due to a conflict with the current state of the target resource.

*/
type CreateSubscriptionConflict struct {
}

func (o *CreateSubscriptionConflict) Error() string {
	return fmt.Sprintf("[POST /EventService/Subscriptions][%d] createSubscriptionConflict ", 409)
}

func (o *CreateSubscriptionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
