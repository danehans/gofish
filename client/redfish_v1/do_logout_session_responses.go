package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/danehans/gofish/models"
)

// DoLogoutSessionReader is a Reader for the DoLogoutSession structure.
type DoLogoutSessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DoLogoutSessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDoLogoutSessionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDoLogoutSessionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewDoLogoutSessionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDoLogoutSessionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDoLogoutSessionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDoLogoutSessionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDoLogoutSessionOK creates a DoLogoutSessionOK with default headers values
func NewDoLogoutSessionOK() *DoLogoutSessionOK {
	return &DoLogoutSessionOK{}
}

/*DoLogoutSessionOK handles this case with default header values.

Success
*/
type DoLogoutSessionOK struct {
	Payload *models.Session100Session
}

func (o *DoLogoutSessionOK) Error() string {
	return fmt.Sprintf("[DELETE /SessionService/Sessions/{identifier}][%d] doLogoutSessionOK  %+v", 200, o.Payload)
}

func (o *DoLogoutSessionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Session100Session)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDoLogoutSessionBadRequest creates a DoLogoutSessionBadRequest with default headers values
func NewDoLogoutSessionBadRequest() *DoLogoutSessionBadRequest {
	return &DoLogoutSessionBadRequest{}
}

/*DoLogoutSessionBadRequest handles this case with default header values.

The request could not be processed because it contains missing or invalid information (such as validation error on an input field, a missing required value, and so on). An extended error shall be returned in the response body, as defined in section Extended Error Handling.

*/
type DoLogoutSessionBadRequest struct {
}

func (o *DoLogoutSessionBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /SessionService/Sessions/{identifier}][%d] doLogoutSessionBadRequest ", 400)
}

func (o *DoLogoutSessionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDoLogoutSessionUnauthorized creates a DoLogoutSessionUnauthorized with default headers values
func NewDoLogoutSessionUnauthorized() *DoLogoutSessionUnauthorized {
	return &DoLogoutSessionUnauthorized{}
}

/*DoLogoutSessionUnauthorized handles this case with default header values.

The authentication credentials included with this request are missing or invalid.

*/
type DoLogoutSessionUnauthorized struct {
}

func (o *DoLogoutSessionUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /SessionService/Sessions/{identifier}][%d] doLogoutSessionUnauthorized ", 401)
}

func (o *DoLogoutSessionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDoLogoutSessionForbidden creates a DoLogoutSessionForbidden with default headers values
func NewDoLogoutSessionForbidden() *DoLogoutSessionForbidden {
	return &DoLogoutSessionForbidden{}
}

/*DoLogoutSessionForbidden handles this case with default header values.

The server recognized the credentials in the request, but those credentials do not possess authorization to perform this request.

*/
type DoLogoutSessionForbidden struct {
}

func (o *DoLogoutSessionForbidden) Error() string {
	return fmt.Sprintf("[DELETE /SessionService/Sessions/{identifier}][%d] doLogoutSessionForbidden ", 403)
}

func (o *DoLogoutSessionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDoLogoutSessionNotFound creates a DoLogoutSessionNotFound with default headers values
func NewDoLogoutSessionNotFound() *DoLogoutSessionNotFound {
	return &DoLogoutSessionNotFound{}
}

/*DoLogoutSessionNotFound handles this case with default header values.

The request specified a URI of a resource that does not exist.

*/
type DoLogoutSessionNotFound struct {
}

func (o *DoLogoutSessionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /SessionService/Sessions/{identifier}][%d] doLogoutSessionNotFound ", 404)
}

func (o *DoLogoutSessionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDoLogoutSessionInternalServerError creates a DoLogoutSessionInternalServerError with default headers values
func NewDoLogoutSessionInternalServerError() *DoLogoutSessionInternalServerError {
	return &DoLogoutSessionInternalServerError{}
}

/*DoLogoutSessionInternalServerError handles this case with default header values.

Error
*/
type DoLogoutSessionInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *DoLogoutSessionInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /SessionService/Sessions/{identifier}][%d] doLogoutSessionInternalServerError  %+v", 500, o.Payload)
}

func (o *DoLogoutSessionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
