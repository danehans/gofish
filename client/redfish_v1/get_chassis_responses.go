package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/danehans/gofish/models"
)

// GetChassisReader is a Reader for the GetChassis structure.
type GetChassisReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetChassisReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetChassisOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetChassisBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetChassisUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetChassisForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetChassisInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetChassisOK creates a GetChassisOK with default headers values
func NewGetChassisOK() *GetChassisOK {
	return &GetChassisOK{}
}

/*GetChassisOK handles this case with default header values.

Success
*/
type GetChassisOK struct {
	Payload *models.Chassis100Chassis
}

func (o *GetChassisOK) Error() string {
	return fmt.Sprintf("[GET /Chassis/{identifier}][%d] getChassisOK  %+v", 200, o.Payload)
}

func (o *GetChassisOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Chassis100Chassis)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetChassisBadRequest creates a GetChassisBadRequest with default headers values
func NewGetChassisBadRequest() *GetChassisBadRequest {
	return &GetChassisBadRequest{}
}

/*GetChassisBadRequest handles this case with default header values.

The request could not be processed because it contains missing or invalid information (such as validation error on an input field, a missing required value, and so on). An extended error shall be returned in the response body, as defined in section Extended Error Handling.

*/
type GetChassisBadRequest struct {
}

func (o *GetChassisBadRequest) Error() string {
	return fmt.Sprintf("[GET /Chassis/{identifier}][%d] getChassisBadRequest ", 400)
}

func (o *GetChassisBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetChassisUnauthorized creates a GetChassisUnauthorized with default headers values
func NewGetChassisUnauthorized() *GetChassisUnauthorized {
	return &GetChassisUnauthorized{}
}

/*GetChassisUnauthorized handles this case with default header values.

The authentication credentials included with this request are missing or invalid.

*/
type GetChassisUnauthorized struct {
}

func (o *GetChassisUnauthorized) Error() string {
	return fmt.Sprintf("[GET /Chassis/{identifier}][%d] getChassisUnauthorized ", 401)
}

func (o *GetChassisUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetChassisForbidden creates a GetChassisForbidden with default headers values
func NewGetChassisForbidden() *GetChassisForbidden {
	return &GetChassisForbidden{}
}

/*GetChassisForbidden handles this case with default header values.

The server recognized the credentials in the request, but those credentials do not possess authorization to perform this request.

*/
type GetChassisForbidden struct {
}

func (o *GetChassisForbidden) Error() string {
	return fmt.Sprintf("[GET /Chassis/{identifier}][%d] getChassisForbidden ", 403)
}

func (o *GetChassisForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetChassisInternalServerError creates a GetChassisInternalServerError with default headers values
func NewGetChassisInternalServerError() *GetChassisInternalServerError {
	return &GetChassisInternalServerError{}
}

/*GetChassisInternalServerError handles this case with default header values.

Error
*/
type GetChassisInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetChassisInternalServerError) Error() string {
	return fmt.Sprintf("[GET /Chassis/{identifier}][%d] getChassisInternalServerError  %+v", 500, o.Payload)
}

func (o *GetChassisInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
