package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/danehans/gofish/models"
)

// GetEventReader is a Reader for the GetEvent structure.
type GetEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetEventOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetEventUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetEventForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetEventOK creates a GetEventOK with default headers values
func NewGetEventOK() *GetEventOK {
	return &GetEventOK{}
}

/*GetEventOK handles this case with default header values.

Success
*/
type GetEventOK struct {
	Payload *models.EventDestination100EventDestination
}

func (o *GetEventOK) Error() string {
	return fmt.Sprintf("[GET /EventService/Subscriptions/{index}][%d] getEventOK  %+v", 200, o.Payload)
}

func (o *GetEventOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EventDestination100EventDestination)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventUnauthorized creates a GetEventUnauthorized with default headers values
func NewGetEventUnauthorized() *GetEventUnauthorized {
	return &GetEventUnauthorized{}
}

/*GetEventUnauthorized handles this case with default header values.

The authentication credentials included with this request are missing or invalid.

*/
type GetEventUnauthorized struct {
}

func (o *GetEventUnauthorized) Error() string {
	return fmt.Sprintf("[GET /EventService/Subscriptions/{index}][%d] getEventUnauthorized ", 401)
}

func (o *GetEventUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetEventForbidden creates a GetEventForbidden with default headers values
func NewGetEventForbidden() *GetEventForbidden {
	return &GetEventForbidden{}
}

/*GetEventForbidden handles this case with default header values.

The server recognized the credentials in the request, but those credentials do not possess authorization to perform this request.

*/
type GetEventForbidden struct {
}

func (o *GetEventForbidden) Error() string {
	return fmt.Sprintf("[GET /EventService/Subscriptions/{index}][%d] getEventForbidden ", 403)
}

func (o *GetEventForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
