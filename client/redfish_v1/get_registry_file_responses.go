package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/danehans/gofish/models"
)

// GetRegistryFileReader is a Reader for the GetRegistryFile structure.
type GetRegistryFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRegistryFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetRegistryFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetRegistryFileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetRegistryFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetRegistryFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRegistryFileOK creates a GetRegistryFileOK with default headers values
func NewGetRegistryFileOK() *GetRegistryFileOK {
	return &GetRegistryFileOK{}
}

/*GetRegistryFileOK handles this case with default header values.

Success
*/
type GetRegistryFileOK struct {
	Payload *models.MessageRegistryFile100MessageRegistryFile
}

func (o *GetRegistryFileOK) Error() string {
	return fmt.Sprintf("[GET /Registries/{identifier}][%d] getRegistryFileOK  %+v", 200, o.Payload)
}

func (o *GetRegistryFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageRegistryFile100MessageRegistryFile)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRegistryFileUnauthorized creates a GetRegistryFileUnauthorized with default headers values
func NewGetRegistryFileUnauthorized() *GetRegistryFileUnauthorized {
	return &GetRegistryFileUnauthorized{}
}

/*GetRegistryFileUnauthorized handles this case with default header values.

The authentication credentials included with this request are missing or invalid.

*/
type GetRegistryFileUnauthorized struct {
}

func (o *GetRegistryFileUnauthorized) Error() string {
	return fmt.Sprintf("[GET /Registries/{identifier}][%d] getRegistryFileUnauthorized ", 401)
}

func (o *GetRegistryFileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRegistryFileForbidden creates a GetRegistryFileForbidden with default headers values
func NewGetRegistryFileForbidden() *GetRegistryFileForbidden {
	return &GetRegistryFileForbidden{}
}

/*GetRegistryFileForbidden handles this case with default header values.

The server recognized the credentials in the request, but those credentials do not possess authorization to perform this request.

*/
type GetRegistryFileForbidden struct {
}

func (o *GetRegistryFileForbidden) Error() string {
	return fmt.Sprintf("[GET /Registries/{identifier}][%d] getRegistryFileForbidden ", 403)
}

func (o *GetRegistryFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRegistryFileInternalServerError creates a GetRegistryFileInternalServerError with default headers values
func NewGetRegistryFileInternalServerError() *GetRegistryFileInternalServerError {
	return &GetRegistryFileInternalServerError{}
}

/*GetRegistryFileInternalServerError handles this case with default header values.

Error
*/
type GetRegistryFileInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetRegistryFileInternalServerError) Error() string {
	return fmt.Sprintf("[GET /Registries/{identifier}][%d] getRegistryFileInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRegistryFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
