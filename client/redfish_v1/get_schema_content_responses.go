package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/danehans/gofish/models"
)

// GetSchemaContentReader is a Reader for the GetSchemaContent structure.
type GetSchemaContentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSchemaContentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSchemaContentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetSchemaContentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetSchemaContentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetSchemaContentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSchemaContentOK creates a GetSchemaContentOK with default headers values
func NewGetSchemaContentOK() *GetSchemaContentOK {
	return &GetSchemaContentOK{}
}

/*GetSchemaContentOK handles this case with default header values.

Success
*/
type GetSchemaContentOK struct {
	Payload *models.JSONSchemaFile100JSONSchemaFile
}

func (o *GetSchemaContentOK) Error() string {
	return fmt.Sprintf("[GET /SchemaStore/en/{identifier}][%d] getSchemaContentOK  %+v", 200, o.Payload)
}

func (o *GetSchemaContentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.JSONSchemaFile100JSONSchemaFile)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchemaContentUnauthorized creates a GetSchemaContentUnauthorized with default headers values
func NewGetSchemaContentUnauthorized() *GetSchemaContentUnauthorized {
	return &GetSchemaContentUnauthorized{}
}

/*GetSchemaContentUnauthorized handles this case with default header values.

The authentication credentials included with this request are missing or invalid.

*/
type GetSchemaContentUnauthorized struct {
}

func (o *GetSchemaContentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /SchemaStore/en/{identifier}][%d] getSchemaContentUnauthorized ", 401)
}

func (o *GetSchemaContentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSchemaContentForbidden creates a GetSchemaContentForbidden with default headers values
func NewGetSchemaContentForbidden() *GetSchemaContentForbidden {
	return &GetSchemaContentForbidden{}
}

/*GetSchemaContentForbidden handles this case with default header values.

The server recognized the credentials in the request, but those credentials do not possess authorization to perform this request.

*/
type GetSchemaContentForbidden struct {
}

func (o *GetSchemaContentForbidden) Error() string {
	return fmt.Sprintf("[GET /SchemaStore/en/{identifier}][%d] getSchemaContentForbidden ", 403)
}

func (o *GetSchemaContentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSchemaContentInternalServerError creates a GetSchemaContentInternalServerError with default headers values
func NewGetSchemaContentInternalServerError() *GetSchemaContentInternalServerError {
	return &GetSchemaContentInternalServerError{}
}

/*GetSchemaContentInternalServerError handles this case with default header values.

Error
*/
type GetSchemaContentInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetSchemaContentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /SchemaStore/en/{identifier}][%d] getSchemaContentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSchemaContentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
