package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/danehans/gofish/models"
)

// GetSessionsReader is a Reader for the GetSessions structure.
type GetSessionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSessionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSessionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetSessionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetSessionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetSessionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetSessionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetSessionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSessionsOK creates a GetSessionsOK with default headers values
func NewGetSessionsOK() *GetSessionsOK {
	return &GetSessionsOK{}
}

/*GetSessionsOK handles this case with default header values.

Success
*/
type GetSessionsOK struct {
	Payload *models.SessionCollectionSessionCollection
}

func (o *GetSessionsOK) Error() string {
	return fmt.Sprintf("[GET /SessionService/Sessions][%d] getSessionsOK  %+v", 200, o.Payload)
}

func (o *GetSessionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SessionCollectionSessionCollection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSessionsBadRequest creates a GetSessionsBadRequest with default headers values
func NewGetSessionsBadRequest() *GetSessionsBadRequest {
	return &GetSessionsBadRequest{}
}

/*GetSessionsBadRequest handles this case with default header values.

The request could not be processed because it contains missing or invalid information (such as validation error on an input field, a missing required value, and so on). An extended error shall be returned in the response body, as defined in section Extended Error Handling.

*/
type GetSessionsBadRequest struct {
}

func (o *GetSessionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /SessionService/Sessions][%d] getSessionsBadRequest ", 400)
}

func (o *GetSessionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSessionsUnauthorized creates a GetSessionsUnauthorized with default headers values
func NewGetSessionsUnauthorized() *GetSessionsUnauthorized {
	return &GetSessionsUnauthorized{}
}

/*GetSessionsUnauthorized handles this case with default header values.

The authentication credentials included with this request are missing or invalid.

*/
type GetSessionsUnauthorized struct {
}

func (o *GetSessionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /SessionService/Sessions][%d] getSessionsUnauthorized ", 401)
}

func (o *GetSessionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSessionsForbidden creates a GetSessionsForbidden with default headers values
func NewGetSessionsForbidden() *GetSessionsForbidden {
	return &GetSessionsForbidden{}
}

/*GetSessionsForbidden handles this case with default header values.

The server recognized the credentials in the request, but those credentials do not possess authorization to perform this request.

*/
type GetSessionsForbidden struct {
}

func (o *GetSessionsForbidden) Error() string {
	return fmt.Sprintf("[GET /SessionService/Sessions][%d] getSessionsForbidden ", 403)
}

func (o *GetSessionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSessionsNotFound creates a GetSessionsNotFound with default headers values
func NewGetSessionsNotFound() *GetSessionsNotFound {
	return &GetSessionsNotFound{}
}

/*GetSessionsNotFound handles this case with default header values.

The request specified a URI of a resource that does not exist.

*/
type GetSessionsNotFound struct {
}

func (o *GetSessionsNotFound) Error() string {
	return fmt.Sprintf("[GET /SessionService/Sessions][%d] getSessionsNotFound ", 404)
}

func (o *GetSessionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSessionsInternalServerError creates a GetSessionsInternalServerError with default headers values
func NewGetSessionsInternalServerError() *GetSessionsInternalServerError {
	return &GetSessionsInternalServerError{}
}

/*GetSessionsInternalServerError handles this case with default header values.

Error
*/
type GetSessionsInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetSessionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /SessionService/Sessions][%d] getSessionsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSessionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
