package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/danehans/gofish/models"
)

// ListLogServiceReader is a Reader for the ListLogService structure.
type ListLogServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListLogServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListLogServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListLogServiceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListLogServiceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListLogServiceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListLogServiceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListLogServiceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListLogServiceOK creates a ListLogServiceOK with default headers values
func NewListLogServiceOK() *ListLogServiceOK {
	return &ListLogServiceOK{}
}

/*ListLogServiceOK handles this case with default header values.

Success
*/
type ListLogServiceOK struct {
	Payload *models.LogServiceCollectionLogServiceCollection
}

func (o *ListLogServiceOK) Error() string {
	return fmt.Sprintf("[GET /Systems/{identifier}/LogServices][%d] listLogServiceOK  %+v", 200, o.Payload)
}

func (o *ListLogServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogServiceCollectionLogServiceCollection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLogServiceBadRequest creates a ListLogServiceBadRequest with default headers values
func NewListLogServiceBadRequest() *ListLogServiceBadRequest {
	return &ListLogServiceBadRequest{}
}

/*ListLogServiceBadRequest handles this case with default header values.

The request could not be processed because it contains missing or invalid information (such as validation error on an input field, a missing required value, and so on). An extended error shall be returned in the response body, as defined in section Extended Error Handling.

*/
type ListLogServiceBadRequest struct {
}

func (o *ListLogServiceBadRequest) Error() string {
	return fmt.Sprintf("[GET /Systems/{identifier}/LogServices][%d] listLogServiceBadRequest ", 400)
}

func (o *ListLogServiceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListLogServiceUnauthorized creates a ListLogServiceUnauthorized with default headers values
func NewListLogServiceUnauthorized() *ListLogServiceUnauthorized {
	return &ListLogServiceUnauthorized{}
}

/*ListLogServiceUnauthorized handles this case with default header values.

The authentication credentials included with this request are missing or invalid.

*/
type ListLogServiceUnauthorized struct {
}

func (o *ListLogServiceUnauthorized) Error() string {
	return fmt.Sprintf("[GET /Systems/{identifier}/LogServices][%d] listLogServiceUnauthorized ", 401)
}

func (o *ListLogServiceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListLogServiceForbidden creates a ListLogServiceForbidden with default headers values
func NewListLogServiceForbidden() *ListLogServiceForbidden {
	return &ListLogServiceForbidden{}
}

/*ListLogServiceForbidden handles this case with default header values.

The server recognized the credentials in the request, but those credentials do not possess authorization to perform this request.

*/
type ListLogServiceForbidden struct {
}

func (o *ListLogServiceForbidden) Error() string {
	return fmt.Sprintf("[GET /Systems/{identifier}/LogServices][%d] listLogServiceForbidden ", 403)
}

func (o *ListLogServiceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListLogServiceNotFound creates a ListLogServiceNotFound with default headers values
func NewListLogServiceNotFound() *ListLogServiceNotFound {
	return &ListLogServiceNotFound{}
}

/*ListLogServiceNotFound handles this case with default header values.

The request specified a URI of a resource that does not exist.

*/
type ListLogServiceNotFound struct {
}

func (o *ListLogServiceNotFound) Error() string {
	return fmt.Sprintf("[GET /Systems/{identifier}/LogServices][%d] listLogServiceNotFound ", 404)
}

func (o *ListLogServiceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListLogServiceInternalServerError creates a ListLogServiceInternalServerError with default headers values
func NewListLogServiceInternalServerError() *ListLogServiceInternalServerError {
	return &ListLogServiceInternalServerError{}
}

/*ListLogServiceInternalServerError handles this case with default header values.

Error
*/
type ListLogServiceInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *ListLogServiceInternalServerError) Error() string {
	return fmt.Sprintf("[GET /Systems/{identifier}/LogServices][%d] listLogServiceInternalServerError  %+v", 500, o.Payload)
}

func (o *ListLogServiceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
