package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/danehans/gofish/models"
)

// ListRegistryReader is a Reader for the ListRegistry structure.
type ListRegistryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListRegistryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListRegistryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewListRegistryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListRegistryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListRegistryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListRegistryOK creates a ListRegistryOK with default headers values
func NewListRegistryOK() *ListRegistryOK {
	return &ListRegistryOK{}
}

/*ListRegistryOK handles this case with default header values.

Success
*/
type ListRegistryOK struct {
	Payload *models.MessageRegistryFileCollectionMessageRegistryFileCollection
}

func (o *ListRegistryOK) Error() string {
	return fmt.Sprintf("[GET /Registries][%d] listRegistryOK  %+v", 200, o.Payload)
}

func (o *ListRegistryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageRegistryFileCollectionMessageRegistryFileCollection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListRegistryUnauthorized creates a ListRegistryUnauthorized with default headers values
func NewListRegistryUnauthorized() *ListRegistryUnauthorized {
	return &ListRegistryUnauthorized{}
}

/*ListRegistryUnauthorized handles this case with default header values.

The authentication credentials included with this request are missing or invalid.

*/
type ListRegistryUnauthorized struct {
}

func (o *ListRegistryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /Registries][%d] listRegistryUnauthorized ", 401)
}

func (o *ListRegistryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListRegistryForbidden creates a ListRegistryForbidden with default headers values
func NewListRegistryForbidden() *ListRegistryForbidden {
	return &ListRegistryForbidden{}
}

/*ListRegistryForbidden handles this case with default header values.

The server recognized the credentials in the request, but those credentials do not possess authorization to perform this request.

*/
type ListRegistryForbidden struct {
}

func (o *ListRegistryForbidden) Error() string {
	return fmt.Sprintf("[GET /Registries][%d] listRegistryForbidden ", 403)
}

func (o *ListRegistryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListRegistryInternalServerError creates a ListRegistryInternalServerError with default headers values
func NewListRegistryInternalServerError() *ListRegistryInternalServerError {
	return &ListRegistryInternalServerError{}
}

/*ListRegistryInternalServerError handles this case with default header values.

Error
*/
type ListRegistryInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *ListRegistryInternalServerError) Error() string {
	return fmt.Sprintf("[GET /Registries][%d] listRegistryInternalServerError  %+v", 500, o.Payload)
}

func (o *ListRegistryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
