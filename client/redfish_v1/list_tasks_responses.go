package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/danehans/gofish/models"
)

// ListTasksReader is a Reader for the ListTasks structure.
type ListTasksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListTasksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListTasksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListTasksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListTasksUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListTasksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListTasksNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListTasksInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListTasksOK creates a ListTasksOK with default headers values
func NewListTasksOK() *ListTasksOK {
	return &ListTasksOK{}
}

/*ListTasksOK handles this case with default header values.

Success
*/
type ListTasksOK struct {
	Payload *models.TaskCollectionTaskCollection
}

func (o *ListTasksOK) Error() string {
	return fmt.Sprintf("[GET /TaskService/Tasks][%d] listTasksOK  %+v", 200, o.Payload)
}

func (o *ListTasksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskCollectionTaskCollection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTasksBadRequest creates a ListTasksBadRequest with default headers values
func NewListTasksBadRequest() *ListTasksBadRequest {
	return &ListTasksBadRequest{}
}

/*ListTasksBadRequest handles this case with default header values.

The request could not be processed because it contains missing or invalid information (such as validation error on an input field, a missing required value, and so on). An extended error shall be returned in the response body, as defined in section Extended Error Handling.

*/
type ListTasksBadRequest struct {
}

func (o *ListTasksBadRequest) Error() string {
	return fmt.Sprintf("[GET /TaskService/Tasks][%d] listTasksBadRequest ", 400)
}

func (o *ListTasksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListTasksUnauthorized creates a ListTasksUnauthorized with default headers values
func NewListTasksUnauthorized() *ListTasksUnauthorized {
	return &ListTasksUnauthorized{}
}

/*ListTasksUnauthorized handles this case with default header values.

The authentication credentials included with this request are missing or invalid.

*/
type ListTasksUnauthorized struct {
}

func (o *ListTasksUnauthorized) Error() string {
	return fmt.Sprintf("[GET /TaskService/Tasks][%d] listTasksUnauthorized ", 401)
}

func (o *ListTasksUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListTasksForbidden creates a ListTasksForbidden with default headers values
func NewListTasksForbidden() *ListTasksForbidden {
	return &ListTasksForbidden{}
}

/*ListTasksForbidden handles this case with default header values.

The server recognized the credentials in the request, but those credentials do not possess authorization to perform this request.

*/
type ListTasksForbidden struct {
}

func (o *ListTasksForbidden) Error() string {
	return fmt.Sprintf("[GET /TaskService/Tasks][%d] listTasksForbidden ", 403)
}

func (o *ListTasksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListTasksNotFound creates a ListTasksNotFound with default headers values
func NewListTasksNotFound() *ListTasksNotFound {
	return &ListTasksNotFound{}
}

/*ListTasksNotFound handles this case with default header values.

The request specified a URI of a resource that does not exist.

*/
type ListTasksNotFound struct {
}

func (o *ListTasksNotFound) Error() string {
	return fmt.Sprintf("[GET /TaskService/Tasks][%d] listTasksNotFound ", 404)
}

func (o *ListTasksNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListTasksInternalServerError creates a ListTasksInternalServerError with default headers values
func NewListTasksInternalServerError() *ListTasksInternalServerError {
	return &ListTasksInternalServerError{}
}

/*ListTasksInternalServerError handles this case with default header values.

Error
*/
type ListTasksInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *ListTasksInternalServerError) Error() string {
	return fmt.Sprintf("[GET /TaskService/Tasks][%d] listTasksInternalServerError  %+v", 500, o.Payload)
}

func (o *ListTasksInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
