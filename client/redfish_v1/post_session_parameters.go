package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/danehans/gofish/models"
)

// NewPostSessionParams creates a new PostSessionParams object
// with the default values initialized.
func NewPostSessionParams() *PostSessionParams {
	var ()
	return &PostSessionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostSessionParamsWithTimeout creates a new PostSessionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostSessionParamsWithTimeout(timeout time.Duration) *PostSessionParams {
	var ()
	return &PostSessionParams{

		timeout: timeout,
	}
}

// NewPostSessionParamsWithContext creates a new PostSessionParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostSessionParamsWithContext(ctx context.Context) *PostSessionParams {
	var ()
	return &PostSessionParams{

		Context: ctx,
	}
}

/*PostSessionParams contains all the parameters to send to the API endpoint
for the post session operation typically these are written to a http.Request
*/
type PostSessionParams struct {

	/*Payload*/
	Payload *models.Session100Session

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post session params
func (o *PostSessionParams) WithTimeout(timeout time.Duration) *PostSessionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post session params
func (o *PostSessionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post session params
func (o *PostSessionParams) WithContext(ctx context.Context) *PostSessionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post session params
func (o *PostSessionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithPayload adds the payload to the post session params
func (o *PostSessionParams) WithPayload(payload *models.Session100Session) *PostSessionParams {
	o.SetPayload(payload)
	return o
}

// SetPayload adds the payload to the post session params
func (o *PostSessionParams) SetPayload(payload *models.Session100Session) {
	o.Payload = payload
}

// WriteToRequest writes these params to a swagger request
func (o *PostSessionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Payload == nil {
		o.Payload = new(models.Session100Session)
	}

	if err := r.SetBodyParam(o.Payload); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
