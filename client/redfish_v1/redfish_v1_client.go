package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new redfish v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for redfish v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateAccount creates a user with the provided information
*/
func (a *Client) CreateAccount(params *CreateAccountParams) (*CreateAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAccount",
		Method:             "POST",
		PathPattern:        "/AccountService/Accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAccountCreated), nil

}

/*
CreateSubscription retrieves collection of subscribed events
*/
func (a *Client) CreateSubscription(params *CreateSubscriptionParams) (*CreateSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSubscription",
		Method:             "POST",
		PathPattern:        "/EventService/Subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSubscriptionOK), nil

}

/*
DeleteEvent deletes specific event subscription
*/
func (a *Client) DeleteEvent(params *DeleteEventParams) (*DeleteEventNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEvent",
		Method:             "DELETE",
		PathPattern:        "/EventService/Subscriptions/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteEventNoContent), nil

}

/*
DoBootImage installs a boot image on a node

Perform the boot image installation specified in the post data arguments on the system described by identifier

*/
func (a *Client) DoBootImage(params *DoBootImageParams) (*DoBootImageAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDoBootImageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "doBootImage",
		Method:             "POST",
		PathPattern:        "/Systems/{identifier}/Actions/CIMC.BootImage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DoBootImageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DoBootImageAccepted), nil

}

/*
DoLogoutSession logouts of the session
*/
func (a *Client) DoLogoutSession(params *DoLogoutSessionParams) (*DoLogoutSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDoLogoutSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "doLogoutSession",
		Method:             "DELETE",
		PathPattern:        "/SessionService/Sessions/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DoLogoutSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DoLogoutSessionOK), nil

}

/*
DoReset resets a node

Perform the reset specified in the post data arguments on the system described by identifier

*/
func (a *Client) DoReset(params *DoResetParams) (*DoResetAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDoResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "doReset",
		Method:             "POST",
		PathPattern:        "/Systems/{identifier}/Actions/ComputerSystem.Reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DoResetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DoResetAccepted), nil

}

/*
EventServiceRoot retrieves list of policies used by event service listeners
*/
func (a *Client) EventServiceRoot(params *EventServiceRootParams) (*EventServiceRootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEventServiceRootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "eventServiceRoot",
		Method:             "GET",
		PathPattern:        "/EventService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EventServiceRootReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EventServiceRootOK), nil

}

/*
GetAccount retrieves information about the specified account
*/
func (a *Client) GetAccount(params *GetAccountParams) (*GetAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccount",
		Method:             "GET",
		PathPattern:        "/AccountService/Accounts/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountOK), nil

}

/*
GetAccountService retrieves account service information
*/
func (a *Client) GetAccountService(params *GetAccountServiceParams) (*GetAccountServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccountService",
		Method:             "GET",
		PathPattern:        "/AccountService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAccountServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountServiceOK), nil

}

/*
GetAccounts retrieves information about the accounts
*/
func (a *Client) GetAccounts(params *GetAccountsParams) (*GetAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccounts",
		Method:             "GET",
		PathPattern:        "/AccountService/Accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountsOK), nil

}

/*
GetChassis retrieves specific information for a physical component

Retrieves a detailed information catalog for the physical component specified by identifier

*/
func (a *Client) GetChassis(params *GetChassisParams) (*GetChassisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChassisParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getChassis",
		Method:             "GET",
		PathPattern:        "/Chassis/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetChassisReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetChassisOK), nil

}

/*
GetEvent retrieves specific event subscription
*/
func (a *Client) GetEvent(params *GetEventParams) (*GetEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEvent",
		Method:             "GET",
		PathPattern:        "/EventService/Subscriptions/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventOK), nil

}

/*
GetEventsCollection retrieves collection of subscribed events
*/
func (a *Client) GetEventsCollection(params *GetEventsCollectionParams) (*GetEventsCollectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventsCollectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventsCollection",
		Method:             "GET",
		PathPattern:        "/EventService/Subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetEventsCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventsCollectionOK), nil

}

/*
GetLocalEthernetInterface retrieves information about the specified ethernet interface
*/
func (a *Client) GetLocalEthernetInterface(params *GetLocalEthernetInterfaceParams) (*GetLocalEthernetInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLocalEthernetInterfaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLocalEthernetInterface",
		Method:             "GET",
		PathPattern:        "/Managers/CIMC/EthernetInterfaces/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLocalEthernetInterfaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLocalEthernetInterfaceOK), nil

}

/*
GetManager retrieves information about a specified management servers
*/
func (a *Client) GetManager(params *GetManagerParams) (*GetManagerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetManagerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getManager",
		Method:             "GET",
		PathPattern:        "/Managers/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetManagerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetManagerOK), nil

}

/*
GetManagerEthernetInterface retrieves information about the specified ethernet interface
*/
func (a *Client) GetManagerEthernetInterface(params *GetManagerEthernetInterfaceParams) (*GetManagerEthernetInterfaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetManagerEthernetInterfaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getManagerEthernetInterface",
		Method:             "GET",
		PathPattern:        "/Managers/{identifier}/EthernetInterfaces/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetManagerEthernetInterfaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetManagerEthernetInterfaceOK), nil

}

/*
GetPower retrieves power characteristics of a chassis

defines a collection of power elements contained within a resource.

*/
func (a *Client) GetPower(params *GetPowerParams) (*GetPowerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPowerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPower",
		Method:             "GET",
		PathPattern:        "/Chassis/{identifier}/Power",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPowerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPowerOK), nil

}

/*
GetRegistryFile retrieves information on a specific registry
*/
func (a *Client) GetRegistryFile(params *GetRegistryFileParams) (*GetRegistryFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegistryFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRegistryFile",
		Method:             "GET",
		PathPattern:        "/Registries/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegistryFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegistryFileOK), nil

}

/*
GetRegistryFileContents retrieves the content of a specific registry
*/
func (a *Client) GetRegistryFileContents(params *GetRegistryFileContentsParams) (*GetRegistryFileContentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegistryFileContentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRegistryFileContents",
		Method:             "GET",
		PathPattern:        "/Registries/en/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegistryFileContentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegistryFileContentsOK), nil

}

/*
GetRole retrieves privileges for a role
*/
func (a *Client) GetRole(params *GetRoleParams) (*GetRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRole",
		Method:             "GET",
		PathPattern:        "/AccountService/Roles/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoleOK), nil

}

/*
GetSchema retrieves information for a specific schema
*/
func (a *Client) GetSchema(params *GetSchemaParams) (*GetSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchemaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSchema",
		Method:             "GET",
		PathPattern:        "/Schemas/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSchemaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSchemaOK), nil

}

/*
GetSchemaContent displays the content of a schema json
*/
func (a *Client) GetSchemaContent(params *GetSchemaContentParams) (*GetSchemaContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchemaContentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSchemaContent",
		Method:             "GET",
		PathPattern:        "/SchemaStore/en/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSchemaContentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSchemaContentOK), nil

}

/*
GetSelLogService retrieves list of the logs for a computer system

Defines a collection of SEL entries for the system described by identifier.

*/
func (a *Client) GetSelLogService(params *GetSelLogServiceParams) (*GetSelLogServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSelLogServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSelLogService",
		Method:             "GET",
		PathPattern:        "/Systems/{identifier}/LogServices/sel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSelLogServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSelLogServiceOK), nil

}

/*
GetSelLogServiceEntry retrieves log entry by log Id associated for log service

Defines a log entry specified by entryId within the LogService of the specified type for the system described by identifier

*/
func (a *Client) GetSelLogServiceEntry(params *GetSelLogServiceEntryParams) (*GetSelLogServiceEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSelLogServiceEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSelLogServiceEntry",
		Method:             "GET",
		PathPattern:        "/Systems/{identifier}/LogServices/sel/Entries/{entryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSelLogServiceEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSelLogServiceEntryOK), nil

}

/*
GetServiceRoot retrieves list of root level resources

This object represents the root Redfish service.  All values for resources described by this schema shall comply to the requirements as described in the Redfish specification. This object represents the root Redfish service.

*/
func (a *Client) GetServiceRoot(params *GetServiceRootParams) (*GetServiceRootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceRootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceRoot",
		Method:             "GET",
		PathPattern:        "/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServiceRootReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServiceRootOK), nil

}

/*
GetSessionInfo retrieves session information
*/
func (a *Client) GetSessionInfo(params *GetSessionInfoParams) (*GetSessionInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSessionInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSessionInfo",
		Method:             "GET",
		PathPattern:        "/SessionService/Sessions/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSessionInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSessionInfoOK), nil

}

/*
GetSessionService retrieves a list of sessions
*/
func (a *Client) GetSessionService(params *GetSessionServiceParams) (*GetSessionServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSessionServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSessionService",
		Method:             "GET",
		PathPattern:        "/SessionService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSessionServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSessionServiceOK), nil

}

/*
GetSessions retrieves a sessions description
*/
func (a *Client) GetSessions(params *GetSessionsParams) (*GetSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSessions",
		Method:             "GET",
		PathPattern:        "/SessionService/Sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSessionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSessionsOK), nil

}

/*
GetSimpleStorage retrieves the simple storage collection by device identifier

Defines a collection of storage devices on the device specified by identifier that are present on the system described by identifier

*/
func (a *Client) GetSimpleStorage(params *GetSimpleStorageParams) (*GetSimpleStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSimpleStorageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSimpleStorage",
		Method:             "GET",
		PathPattern:        "/Systems/{identifier}/SimpleStorage/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSimpleStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSimpleStorageOK), nil

}

/*
GetSystem retrieves information for a specific computer systems physical and or virtual

defines a computer system and its respective properties.  A computer system represents a machine (physical or virtual) and the local resources such as memory, cpu and other devices that can be accessed from that machine.

*/
func (a *Client) GetSystem(params *GetSystemParams) (*GetSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSystem",
		Method:             "GET",
		PathPattern:        "/Systems/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSystemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSystemOK), nil

}

/*
GetSystemProcessor retrieves a specified processor for the specified system identifier

This represents the properties of a processor attached to a System.

*/
func (a *Client) GetSystemProcessor(params *GetSystemProcessorParams) (*GetSystemProcessorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemProcessorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSystemProcessor",
		Method:             "GET",
		PathPattern:        "/Systems/{identifier}/Processors/{socket}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSystemProcessorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSystemProcessorOK), nil

}

/*
GetSystemTasks retrieves list of tasks per system Id

This object represents the root Redfish service.
*/
func (a *Client) GetSystemTasks(params *GetSystemTasksParams) (*GetSystemTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSystemTasks",
		Method:             "GET",
		PathPattern:        "/TaskService/Oem/Tasks/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSystemTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSystemTasksOK), nil

}

/*
GetTask retrieves a task entry by task Id

This object represents the root Redfish service.
*/
func (a *Client) GetTask(params *GetTaskParams) (*GetTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTask",
		Method:             "GET",
		PathPattern:        "/TaskService/Tasks/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTaskOK), nil

}

/*
GetThermal retrieves thermal characteristics of a chassis

defines a collection of thermal elements contained within a resource.

*/
func (a *Client) GetThermal(params *GetThermalParams) (*GetThermalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetThermalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getThermal",
		Method:             "GET",
		PathPattern:        "/Chassis/{identifier}/Thermal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetThermalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetThermalOK), nil

}

/*
ListBootImage retrieves the list of boot image types for the specified compute node

Retrieve  a list of valid boot image types for the system described by identifier

*/
func (a *Client) ListBootImage(params *ListBootImageParams) (*ListBootImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBootImageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listBootImage",
		Method:             "GET",
		PathPattern:        "/Systems/{identifier}/Actions/CIMC.BootImage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListBootImageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListBootImageOK), nil

}

/*
ListChassis retrieves list of physical components

Defines a collection of physical components managed by the service

*/
func (a *Client) ListChassis(params *ListChassisParams) (*ListChassisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListChassisParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listChassis",
		Method:             "GET",
		PathPattern:        "/Chassis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListChassisReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListChassisOK), nil

}

/*
ListLocalEthernetInterfaces retrieves information about the ethernet interfaces
*/
func (a *Client) ListLocalEthernetInterfaces(params *ListLocalEthernetInterfacesParams) (*ListLocalEthernetInterfacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLocalEthernetInterfacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listLocalEthernetInterfaces",
		Method:             "GET",
		PathPattern:        "/Managers/CIMC/EthernetInterfaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListLocalEthernetInterfacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListLocalEthernetInterfacesOK), nil

}

/*
ListLogService retrieves list of the logs for a computer system

Defines a collection of log services that are available for the system described by identifier

*/
func (a *Client) ListLogService(params *ListLogServiceParams) (*ListLogServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLogServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listLogService",
		Method:             "GET",
		PathPattern:        "/Systems/{identifier}/LogServices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListLogServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListLogServiceOK), nil

}

/*
ListManagerEthernetInterfaces retrieves information about the ethernet interfaces
*/
func (a *Client) ListManagerEthernetInterfaces(params *ListManagerEthernetInterfacesParams) (*ListManagerEthernetInterfacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListManagerEthernetInterfacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listManagerEthernetInterfaces",
		Method:             "GET",
		PathPattern:        "/Managers/{identifier}/EthernetInterfaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListManagerEthernetInterfacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListManagerEthernetInterfacesOK), nil

}

/*
ListManagers retrieves list of management servers
*/
func (a *Client) ListManagers(params *ListManagersParams) (*ListManagersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListManagersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listManagers",
		Method:             "GET",
		PathPattern:        "/Managers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListManagersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListManagersOK), nil

}

/*
ListRegistry retrieves list of registries
*/
func (a *Client) ListRegistry(params *ListRegistryParams) (*ListRegistryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRegistryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRegistry",
		Method:             "GET",
		PathPattern:        "/Registries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRegistryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListRegistryOK), nil

}

/*
ListResetTypes retrieves the list of reset types for the specified compute node

Retrieve  a list of valid reset types for the system described by identifier

*/
func (a *Client) ListResetTypes(params *ListResetTypesParams) (*ListResetTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListResetTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listResetTypes",
		Method:             "GET",
		PathPattern:        "/Systems/{identifier}/Actions/ComputerSystem.Reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListResetTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListResetTypesOK), nil

}

/*
ListRoles retrieves list of roles
*/
func (a *Client) ListRoles(params *ListRolesParams) (*ListRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRoles",
		Method:             "GET",
		PathPattern:        "/AccountService/Roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListRolesOK), nil

}

/*
ListSchemas retrieves list of schemas
*/
func (a *Client) ListSchemas(params *ListSchemasParams) (*ListSchemasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSchemasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSchemas",
		Method:             "GET",
		PathPattern:        "/Schemas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListSchemasReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSchemasOK), nil

}

/*
ListSelLogServiceEntries retrieves list of the logs entries for associated for log service

Defines a collection of entries for the system described by identifier

*/
func (a *Client) ListSelLogServiceEntries(params *ListSelLogServiceEntriesParams) (*ListSelLogServiceEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSelLogServiceEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSelLogServiceEntries",
		Method:             "GET",
		PathPattern:        "/Systems/{identifier}/LogServices/sel/Entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListSelLogServiceEntriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSelLogServiceEntriesOK), nil

}

/*
ListSimpleStorage retrieves the simple storage collection

Defines a collection of simple storage collections that are present on the system described by identifier

*/
func (a *Client) ListSimpleStorage(params *ListSimpleStorageParams) (*ListSimpleStorageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSimpleStorageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSimpleStorage",
		Method:             "GET",
		PathPattern:        "/Systems/{identifier}/SimpleStorage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListSimpleStorageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSimpleStorageOK), nil

}

/*
ListSystemProcessors retrieves the processor collection for the specified system identifier

defines a collection of processors contained within a resource.

*/
func (a *Client) ListSystemProcessors(params *ListSystemProcessorsParams) (*ListSystemProcessorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSystemProcessorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSystemProcessors",
		Method:             "GET",
		PathPattern:        "/Systems/{identifier}/Processors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListSystemProcessorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSystemProcessorsOK), nil

}

/*
ListSystems retrieves list of computer systems

retrieve list of computer systems
*/
func (a *Client) ListSystems(params *ListSystemsParams) (*ListSystemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSystemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSystems",
		Method:             "GET",
		PathPattern:        "/Systems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListSystemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSystemsOK), nil

}

/*
ListTasks retrieves list of all tasks

This object represents the root Redfish service.
*/
func (a *Client) ListTasks(params *ListTasksParams) (*ListTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listTasks",
		Method:             "GET",
		PathPattern:        "/TaskService/Tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListTasksOK), nil

}

/*
ModifyAccount updates the user with the provided information
*/
func (a *Client) ModifyAccount(params *ModifyAccountParams) (*ModifyAccountAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyAccount",
		Method:             "PATCH",
		PathPattern:        "/AccountService/Accounts/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyAccountAccepted), nil

}

/*
PatchManager updates the specified management server
*/
func (a *Client) PatchManager(params *PatchManagerParams) (*PatchManagerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchManagerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchManager",
		Method:             "PATCH",
		PathPattern:        "/Managers/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchManagerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchManagerOK), nil

}

/*
PostSession creates a new session
*/
func (a *Client) PostSession(params *PostSessionParams) (*PostSessionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSession",
		Method:             "POST",
		PathPattern:        "/SessionService/Sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSessionCreated), nil

}

/*
RemoveAccount deletes the specified account
*/
func (a *Client) RemoveAccount(params *RemoveAccountParams) (*RemoveAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeAccount",
		Method:             "DELETE",
		PathPattern:        "/AccountService/Accounts/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveAccountNoContent), nil

}

/*
TaskServiceRoot retrieves list of all tasks

This object represents the root Redfish service.
*/
func (a *Client) TaskServiceRoot(params *TaskServiceRootParams) (*TaskServiceRootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaskServiceRootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "taskServiceRoot",
		Method:             "GET",
		PathPattern:        "/TaskService",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TaskServiceRootReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TaskServiceRootOK), nil

}

/*
TestEvent submits a test event action
*/
func (a *Client) TestEvent(params *TestEventParams) (*TestEventAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testEvent",
		Method:             "POST",
		PathPattern:        "/EventService/Actions/EventService.SubmitTestEvent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TestEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TestEventAccepted), nil

}

/*
Unimplemented retrieves the ethernet interface by device identifier

Defines an ethernet interface present on the system described by identifier

*/
func (a *Client) Unimplemented(params *UnimplementedParams) (*UnimplementedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnimplementedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unimplemented",
		Method:             "GET",
		PathPattern:        "/Systems/{identifier}/EthernetInterfaces/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UnimplementedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UnimplementedOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
