package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/danehans/gofish/models"
)

// TaskServiceRootReader is a Reader for the TaskServiceRoot structure.
type TaskServiceRootReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TaskServiceRootReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewTaskServiceRootOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewTaskServiceRootBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewTaskServiceRootUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewTaskServiceRootForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewTaskServiceRootNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewTaskServiceRootInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTaskServiceRootOK creates a TaskServiceRootOK with default headers values
func NewTaskServiceRootOK() *TaskServiceRootOK {
	return &TaskServiceRootOK{}
}

/*TaskServiceRootOK handles this case with default header values.

Success
*/
type TaskServiceRootOK struct {
	Payload *models.TaskService100TaskService
}

func (o *TaskServiceRootOK) Error() string {
	return fmt.Sprintf("[GET /TaskService][%d] taskServiceRootOK  %+v", 200, o.Payload)
}

func (o *TaskServiceRootOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskService100TaskService)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTaskServiceRootBadRequest creates a TaskServiceRootBadRequest with default headers values
func NewTaskServiceRootBadRequest() *TaskServiceRootBadRequest {
	return &TaskServiceRootBadRequest{}
}

/*TaskServiceRootBadRequest handles this case with default header values.

The request could not be processed because it contains missing or invalid information (such as validation error on an input field, a missing required value, and so on). An extended error shall be returned in the response body, as defined in section Extended Error Handling.

*/
type TaskServiceRootBadRequest struct {
}

func (o *TaskServiceRootBadRequest) Error() string {
	return fmt.Sprintf("[GET /TaskService][%d] taskServiceRootBadRequest ", 400)
}

func (o *TaskServiceRootBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTaskServiceRootUnauthorized creates a TaskServiceRootUnauthorized with default headers values
func NewTaskServiceRootUnauthorized() *TaskServiceRootUnauthorized {
	return &TaskServiceRootUnauthorized{}
}

/*TaskServiceRootUnauthorized handles this case with default header values.

The authentication credentials included with this request are missing or invalid.

*/
type TaskServiceRootUnauthorized struct {
}

func (o *TaskServiceRootUnauthorized) Error() string {
	return fmt.Sprintf("[GET /TaskService][%d] taskServiceRootUnauthorized ", 401)
}

func (o *TaskServiceRootUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTaskServiceRootForbidden creates a TaskServiceRootForbidden with default headers values
func NewTaskServiceRootForbidden() *TaskServiceRootForbidden {
	return &TaskServiceRootForbidden{}
}

/*TaskServiceRootForbidden handles this case with default header values.

The server recognized the credentials in the request, but those credentials do not possess authorization to perform this request.

*/
type TaskServiceRootForbidden struct {
}

func (o *TaskServiceRootForbidden) Error() string {
	return fmt.Sprintf("[GET /TaskService][%d] taskServiceRootForbidden ", 403)
}

func (o *TaskServiceRootForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTaskServiceRootNotFound creates a TaskServiceRootNotFound with default headers values
func NewTaskServiceRootNotFound() *TaskServiceRootNotFound {
	return &TaskServiceRootNotFound{}
}

/*TaskServiceRootNotFound handles this case with default header values.

The request specified a URI of a resource that does not exist.

*/
type TaskServiceRootNotFound struct {
}

func (o *TaskServiceRootNotFound) Error() string {
	return fmt.Sprintf("[GET /TaskService][%d] taskServiceRootNotFound ", 404)
}

func (o *TaskServiceRootNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTaskServiceRootInternalServerError creates a TaskServiceRootInternalServerError with default headers values
func NewTaskServiceRootInternalServerError() *TaskServiceRootInternalServerError {
	return &TaskServiceRootInternalServerError{}
}

/*TaskServiceRootInternalServerError handles this case with default header values.

Error
*/
type TaskServiceRootInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *TaskServiceRootInternalServerError) Error() string {
	return fmt.Sprintf("[GET /TaskService][%d] taskServiceRootInternalServerError  %+v", 500, o.Payload)
}

func (o *TaskServiceRootInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
