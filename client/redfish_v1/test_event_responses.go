package redfish_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// TestEventReader is a Reader for the TestEvent structure.
type TestEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TestEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewTestEventAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewTestEventUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewTestEventForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTestEventAccepted creates a TestEventAccepted with default headers values
func NewTestEventAccepted() *TestEventAccepted {
	return &TestEventAccepted{}
}

/*TestEventAccepted handles this case with default header values.

The request has been accepted for processing, but the processing has not been completed. The Location header shall be set to the URI of a Task resource that can later be queried to determine the status of the operation. A representation of the Task resource may be included in the response body.

*/
type TestEventAccepted struct {
}

func (o *TestEventAccepted) Error() string {
	return fmt.Sprintf("[POST /EventService/Actions/EventService.SubmitTestEvent][%d] testEventAccepted ", 202)
}

func (o *TestEventAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTestEventUnauthorized creates a TestEventUnauthorized with default headers values
func NewTestEventUnauthorized() *TestEventUnauthorized {
	return &TestEventUnauthorized{}
}

/*TestEventUnauthorized handles this case with default header values.

The authentication credentials included with this request are missing or invalid.

*/
type TestEventUnauthorized struct {
}

func (o *TestEventUnauthorized) Error() string {
	return fmt.Sprintf("[POST /EventService/Actions/EventService.SubmitTestEvent][%d] testEventUnauthorized ", 401)
}

func (o *TestEventUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTestEventForbidden creates a TestEventForbidden with default headers values
func NewTestEventForbidden() *TestEventForbidden {
	return &TestEventForbidden{}
}

/*TestEventForbidden handles this case with default header values.

The server recognized the credentials in the request, but those credentials do not possess authorization to perform this request.

*/
type TestEventForbidden struct {
}

func (o *TestEventForbidden) Error() string {
	return fmt.Sprintf("[POST /EventService/Actions/EventService.SubmitTestEvent][%d] testEventForbidden ", 403)
}

func (o *TestEventForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
