package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// CIMCBootImageBootImage This is the base type for the boot image installation action.
// swagger:model CIMC.BootImage_BootImage
type CIMCBootImageBootImage struct {

	// dns servers
	DNSServers []string `json:"dnsServers"`

	// domain
	Domain string `json:"domain,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// install disk
	InstallDisk string `json:"installDisk,omitempty"`

	// network devices
	NetworkDevices []*CIMCBootImageNetworkDevice `json:"networkDevices"`

	// os name
	// Required: true
	OsName *string `json:"osName"`

	// repo
	// Required: true
	Repo *string `json:"repo"`

	// root password
	// Required: true
	RootPassword *string `json:"rootPassword"`

	// root Ssh key
	RootSSHKey string `json:"rootSshKey,omitempty"`

	// users
	Users []*CIMCBootImageUsers `json:"users"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this c i m c boot image boot image
func (m *CIMCBootImageBootImage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDNSServers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetworkDevices(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOsName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRepo(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRootPassword(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CIMCBootImageBootImage) validateDNSServers(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSServers) { // not required
		return nil
	}

	return nil
}

func (m *CIMCBootImageBootImage) validateNetworkDevices(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkDevices) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkDevices); i++ {

		if swag.IsZero(m.NetworkDevices[i]) { // not required
			continue
		}

		if m.NetworkDevices[i] != nil {

			if err := m.NetworkDevices[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

var cIMCBootImageBootImageTypeOsNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CentOS","CentOS+KVM","ESXi","RHEL","RHEL+KVM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cIMCBootImageBootImageTypeOsNamePropEnum = append(cIMCBootImageBootImageTypeOsNamePropEnum, v)
	}
}

const (
	// CIMCBootImageBootImageOsNameCentOS captures enum value "CentOS"
	CIMCBootImageBootImageOsNameCentOS string = "CentOS"
	// CIMCBootImageBootImageOsNameCentOSKVM captures enum value "CentOS+KVM"
	CIMCBootImageBootImageOsNameCentOSKVM string = "CentOS+KVM"
	// CIMCBootImageBootImageOsNameESXi captures enum value "ESXi"
	CIMCBootImageBootImageOsNameESXi string = "ESXi"
	// CIMCBootImageBootImageOsNameRHEL captures enum value "RHEL"
	CIMCBootImageBootImageOsNameRHEL string = "RHEL"
	// CIMCBootImageBootImageOsNameRHELKVM captures enum value "RHEL+KVM"
	CIMCBootImageBootImageOsNameRHELKVM string = "RHEL+KVM"
)

// prop value enum
func (m *CIMCBootImageBootImage) validateOsNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cIMCBootImageBootImageTypeOsNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CIMCBootImageBootImage) validateOsName(formats strfmt.Registry) error {

	if err := validate.Required("osName", "body", m.OsName); err != nil {
		return err
	}

	// value enum
	if err := m.validateOsNameEnum("osName", "body", *m.OsName); err != nil {
		return err
	}

	return nil
}

func (m *CIMCBootImageBootImage) validateRepo(formats strfmt.Registry) error {

	if err := validate.Required("repo", "body", m.Repo); err != nil {
		return err
	}

	return nil
}

func (m *CIMCBootImageBootImage) validateRootPassword(formats strfmt.Registry) error {

	if err := validate.Required("rootPassword", "body", m.RootPassword); err != nil {
		return err
	}

	return nil
}

func (m *CIMCBootImageBootImage) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {

		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {

			if err := m.Users[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *CIMCBootImageBootImage) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}
