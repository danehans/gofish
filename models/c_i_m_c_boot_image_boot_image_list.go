package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// CIMCBootImageBootImageList c i m c boot image boot image list
// swagger:model CIMC.BootImage_BootImageList
type CIMCBootImageBootImageList struct {

	// os name
	OsName string `json:"osName,omitempty"`
}

// Validate validates this c i m c boot image boot image list
func (m *CIMCBootImageBootImageList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOsName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cIMCBootImageBootImageListTypeOsNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CentOS","CentOS+KVM","ESXi","RHEL","RHEL+KVM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cIMCBootImageBootImageListTypeOsNamePropEnum = append(cIMCBootImageBootImageListTypeOsNamePropEnum, v)
	}
}

const (
	// CIMCBootImageBootImageListOsNameCentOS captures enum value "CentOS"
	CIMCBootImageBootImageListOsNameCentOS string = "CentOS"
	// CIMCBootImageBootImageListOsNameCentOSKVM captures enum value "CentOS+KVM"
	CIMCBootImageBootImageListOsNameCentOSKVM string = "CentOS+KVM"
	// CIMCBootImageBootImageListOsNameESXi captures enum value "ESXi"
	CIMCBootImageBootImageListOsNameESXi string = "ESXi"
	// CIMCBootImageBootImageListOsNameRHEL captures enum value "RHEL"
	CIMCBootImageBootImageListOsNameRHEL string = "RHEL"
	// CIMCBootImageBootImageListOsNameRHELKVM captures enum value "RHEL+KVM"
	CIMCBootImageBootImageListOsNameRHELKVM string = "RHEL+KVM"
)

// prop value enum
func (m *CIMCBootImageBootImageList) validateOsNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cIMCBootImageBootImageListTypeOsNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CIMCBootImageBootImageList) validateOsName(formats strfmt.Registry) error {

	if swag.IsZero(m.OsName) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsNameEnum("osName", "body", m.OsName); err != nil {
		return err
	}

	return nil
}
