package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Chassis100Chassis This is the schema definition for the Chassis resource.  It represents the properties for physical components for any system.  This one object is intended to represent racks, rackmount servers, blades, standalone, modular systems, enclosures, and all other containers.  The non-cpu/device centric parts of the schema are all accessed either directly or indirectly through this resource.
// swagger:model Chassis.1.0.0_Chassis
type Chassis100Chassis struct {

	// at odata context
	// Read Only: true
	AtOdataContext strfmt.URI `json:"@odata.context,omitempty"`

	// at odata id
	// Read Only: true
	AtOdataID strfmt.URI `json:"@odata.id,omitempty"`

	// at odata type
	// Read Only: true
	AtOdataType string `json:"@odata.type,omitempty"`

	// actions
	Actions *Chassis100ChassisActions `json:"Actions,omitempty"`

	// The user assigned asset tag for this chassis.
	AssetTag string `json:"AssetTag,omitempty"`

	// This property indicates the type of physical form factor of this resource.
	// Required: true
	// Read Only: true
	ChassisType string `json:"ChassisType"`

	// Provides a description of this resource and is used for commonality  in the schema definitions.
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// Uniquely identifies the resource within the collection of like resources.
	// Read Only: true
	ID string `json:"Id,omitempty"`

	// The state of the indicator LED, used to identify the chassis.
	IndicatorLED string `json:"IndicatorLED,omitempty"`

	// links
	Links *Chassis100ChassisLinks `json:"Links,omitempty"`

	// A reference to the logs for this chassis.
	// Read Only: true
	LogServices *LogServiceCollectionLogServiceCollection `json:"LogServices,omitempty"`

	// This is the manufacturer of this chassis.
	// Read Only: true
	Manufacturer string `json:"Manufacturer,omitempty"`

	// This is the model number for the chassis.
	// Read Only: true
	Model string `json:"Model,omitempty"`

	// The name of the resource or array element.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	Oem ResourceOem `json:"Oem,omitempty"`

	// The part number for this chassis.
	// Read Only: true
	PartNumber string `json:"PartNumber,omitempty"`

	// A reference to the power properties (power supplies, power policies, sensors) for this chassis.
	// Read Only: true
	Power *Odata400IDRef `json:"Power,omitempty"`

	// This is the SKU for this chassis.
	// Read Only: true
	SKU string `json:"SKU,omitempty"`

	// The serial number for this chassis.
	// Read Only: true
	SerialNumber string `json:"SerialNumber,omitempty"`

	// status
	Status *ResourceStatus `json:"Status,omitempty"`

	// A reference to the thermal properties (fans, cooling, sensors) for this chassis.
	// Read Only: true
	Thermal *Odata400IDRef `json:"Thermal,omitempty"`
}

// Validate validates this chassis 1 0 0 chassis
func (m *Chassis100Chassis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateChassisType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIndicatorLED(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLogServices(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePower(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateThermal(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Chassis100Chassis) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	if m.Actions != nil {

		if err := m.Actions.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var chassis100ChassisTypeChassisTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Rack","Blade","Enclosure","StandAlone","RackMount","Card","Cartridge","Row","Pod","Expansion","Sidecar","Zone","Sled","Shelf","Drawer","Module","Component","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chassis100ChassisTypeChassisTypePropEnum = append(chassis100ChassisTypeChassisTypePropEnum, v)
	}
}

const (
	// Chassis100ChassisChassisTypeRack captures enum value "Rack"
	Chassis100ChassisChassisTypeRack string = "Rack"
	// Chassis100ChassisChassisTypeBlade captures enum value "Blade"
	Chassis100ChassisChassisTypeBlade string = "Blade"
	// Chassis100ChassisChassisTypeEnclosure captures enum value "Enclosure"
	Chassis100ChassisChassisTypeEnclosure string = "Enclosure"
	// Chassis100ChassisChassisTypeStandAlone captures enum value "StandAlone"
	Chassis100ChassisChassisTypeStandAlone string = "StandAlone"
	// Chassis100ChassisChassisTypeRackMount captures enum value "RackMount"
	Chassis100ChassisChassisTypeRackMount string = "RackMount"
	// Chassis100ChassisChassisTypeCard captures enum value "Card"
	Chassis100ChassisChassisTypeCard string = "Card"
	// Chassis100ChassisChassisTypeCartridge captures enum value "Cartridge"
	Chassis100ChassisChassisTypeCartridge string = "Cartridge"
	// Chassis100ChassisChassisTypeRow captures enum value "Row"
	Chassis100ChassisChassisTypeRow string = "Row"
	// Chassis100ChassisChassisTypePod captures enum value "Pod"
	Chassis100ChassisChassisTypePod string = "Pod"
	// Chassis100ChassisChassisTypeExpansion captures enum value "Expansion"
	Chassis100ChassisChassisTypeExpansion string = "Expansion"
	// Chassis100ChassisChassisTypeSidecar captures enum value "Sidecar"
	Chassis100ChassisChassisTypeSidecar string = "Sidecar"
	// Chassis100ChassisChassisTypeZone captures enum value "Zone"
	Chassis100ChassisChassisTypeZone string = "Zone"
	// Chassis100ChassisChassisTypeSled captures enum value "Sled"
	Chassis100ChassisChassisTypeSled string = "Sled"
	// Chassis100ChassisChassisTypeShelf captures enum value "Shelf"
	Chassis100ChassisChassisTypeShelf string = "Shelf"
	// Chassis100ChassisChassisTypeDrawer captures enum value "Drawer"
	Chassis100ChassisChassisTypeDrawer string = "Drawer"
	// Chassis100ChassisChassisTypeModule captures enum value "Module"
	Chassis100ChassisChassisTypeModule string = "Module"
	// Chassis100ChassisChassisTypeComponent captures enum value "Component"
	Chassis100ChassisChassisTypeComponent string = "Component"
	// Chassis100ChassisChassisTypeOther captures enum value "Other"
	Chassis100ChassisChassisTypeOther string = "Other"
)

// prop value enum
func (m *Chassis100Chassis) validateChassisTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, chassis100ChassisTypeChassisTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Chassis100Chassis) validateChassisType(formats strfmt.Registry) error {

	if err := validate.RequiredString("ChassisType", "body", string(m.ChassisType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateChassisTypeEnum("ChassisType", "body", m.ChassisType); err != nil {
		return err
	}

	return nil
}

var chassis100ChassisTypeIndicatorLEDPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Lit","Blinking","Off"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chassis100ChassisTypeIndicatorLEDPropEnum = append(chassis100ChassisTypeIndicatorLEDPropEnum, v)
	}
}

const (
	// Chassis100ChassisIndicatorLEDUnknown captures enum value "Unknown"
	Chassis100ChassisIndicatorLEDUnknown string = "Unknown"
	// Chassis100ChassisIndicatorLEDLit captures enum value "Lit"
	Chassis100ChassisIndicatorLEDLit string = "Lit"
	// Chassis100ChassisIndicatorLEDBlinking captures enum value "Blinking"
	Chassis100ChassisIndicatorLEDBlinking string = "Blinking"
	// Chassis100ChassisIndicatorLEDOff captures enum value "Off"
	Chassis100ChassisIndicatorLEDOff string = "Off"
)

// prop value enum
func (m *Chassis100Chassis) validateIndicatorLEDEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, chassis100ChassisTypeIndicatorLEDPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Chassis100Chassis) validateIndicatorLED(formats strfmt.Registry) error {

	if swag.IsZero(m.IndicatorLED) { // not required
		return nil
	}

	// value enum
	if err := m.validateIndicatorLEDEnum("IndicatorLED", "body", m.IndicatorLED); err != nil {
		return err
	}

	return nil
}

func (m *Chassis100Chassis) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {

		if err := m.Links.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Chassis100Chassis) validateLogServices(formats strfmt.Registry) error {

	if swag.IsZero(m.LogServices) { // not required
		return nil
	}

	if m.LogServices != nil {

		if err := m.LogServices.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Chassis100Chassis) validatePower(formats strfmt.Registry) error {

	if swag.IsZero(m.Power) { // not required
		return nil
	}

	if m.Power != nil {

		if err := m.Power.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Chassis100Chassis) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {

		if err := m.Status.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Chassis100Chassis) validateThermal(formats strfmt.Registry) error {

	if swag.IsZero(m.Thermal) { // not required
		return nil
	}

	if m.Thermal != nil {

		if err := m.Thermal.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// Chassis100ChassisActions The Actions object contains the available custom actions on this resource.
// swagger:model Chassis100ChassisActions
type Chassis100ChassisActions struct {

	// chassis reset
	NrChassisReset *Chassis100Reset `json:"#Chassis.Reset,omitempty"`

	// oem
	Oem interface{} `json:"Oem,omitempty"`
}

// Validate validates this chassis100 chassis actions
func (m *Chassis100ChassisActions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNrChassisReset(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Chassis100ChassisActions) validateNrChassisReset(formats strfmt.Registry) error {

	if swag.IsZero(m.NrChassisReset) { // not required
		return nil
	}

	if m.NrChassisReset != nil {

		if err := m.NrChassisReset.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// Chassis100ChassisLinks The links object contains the links to other resources that are related to this resource.
// swagger:model Chassis100ChassisLinks
type Chassis100ChassisLinks struct {

	// An array of references to the computer systems contained in this chassis.  This will only reference ComputerSystems that are directly and wholly contained in this chassis.
	// Read Only: true
	ComputerSystems []*Odata400IDRef `json:"ComputerSystems"`

	// computer systems at odata count
	// Read Only: true
	ComputerSystemsAtOdataCount float64 `json:"ComputerSystems@odata.count,omitempty"`

	// computer systems at odata navigation link
	ComputerSystemsAtOdataNavigationLink *Odata400IDRef `json:"ComputerSystems@odata.navigationLink,omitempty"`

	// A reference to the chassis that this chassis is contained by.
	// Read Only: true
	ContainedBy *Odata400IDRef `json:"ContainedBy,omitempty"`

	// An array of references to any other chassis that this chassis has in it.
	// Read Only: true
	Contains []*Odata400IDRef `json:"Contains"`

	// contains at odata count
	// Read Only: true
	ContainsAtOdataCount float64 `json:"Contains@odata.count,omitempty"`

	// contains at odata navigation link
	ContainsAtOdataNavigationLink *Odata400IDRef `json:"Contains@odata.navigationLink,omitempty"`

	// An array of ID[s] of resources that cool this chassis. Normally the ID will be a chassis or a specific set of fans.
	// Read Only: true
	CooledBy []*Odata400IDRef `json:"CooledBy"`

	// cooled by at odata count
	// Read Only: true
	CooledByAtOdataCount float64 `json:"CooledBy@odata.count,omitempty"`

	// cooled by at odata navigation link
	CooledByAtOdataNavigationLink *Odata400IDRef `json:"CooledBy@odata.navigationLink,omitempty"`

	// An array of references to the managers contained in this chassis.
	// Read Only: true
	ManagedBy []*Odata400IDRef `json:"ManagedBy"`

	// managed by at odata count
	// Read Only: true
	ManagedByAtOdataCount float64 `json:"ManagedBy@odata.count,omitempty"`

	// managed by at odata navigation link
	ManagedByAtOdataNavigationLink *Odata400IDRef `json:"ManagedBy@odata.navigationLink,omitempty"`

	// Oem extension object.
	Oem ResourceOem `json:"Oem,omitempty"`

	// An array of ID[s] of resources that power this chassis. Normally the ID will be a chassis or a specific set of powerSupplies
	// Read Only: true
	PoweredBy []*Odata400IDRef `json:"PoweredBy"`

	// powered by at odata count
	// Read Only: true
	PoweredByAtOdataCount float64 `json:"PoweredBy@odata.count,omitempty"`

	// powered by at odata navigation link
	PoweredByAtOdataNavigationLink *Odata400IDRef `json:"PoweredBy@odata.navigationLink,omitempty"`
}

// Validate validates this chassis100 chassis links
func (m *Chassis100ChassisLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComputerSystems(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateComputerSystemsAtOdataNavigationLink(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContainedBy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContains(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContainsAtOdataNavigationLink(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCooledBy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCooledByAtOdataNavigationLink(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateManagedBy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateManagedByAtOdataNavigationLink(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePoweredBy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePoweredByAtOdataNavigationLink(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Chassis100ChassisLinks) validateComputerSystems(formats strfmt.Registry) error {

	if swag.IsZero(m.ComputerSystems) { // not required
		return nil
	}

	for i := 0; i < len(m.ComputerSystems); i++ {

		if swag.IsZero(m.ComputerSystems[i]) { // not required
			continue
		}

		if m.ComputerSystems[i] != nil {

			if err := m.ComputerSystems[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Chassis100ChassisLinks) validateComputerSystemsAtOdataNavigationLink(formats strfmt.Registry) error {

	if swag.IsZero(m.ComputerSystemsAtOdataNavigationLink) { // not required
		return nil
	}

	if m.ComputerSystemsAtOdataNavigationLink != nil {

		if err := m.ComputerSystemsAtOdataNavigationLink.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Chassis100ChassisLinks) validateContainedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ContainedBy) { // not required
		return nil
	}

	if m.ContainedBy != nil {

		if err := m.ContainedBy.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Chassis100ChassisLinks) validateContains(formats strfmt.Registry) error {

	if swag.IsZero(m.Contains) { // not required
		return nil
	}

	for i := 0; i < len(m.Contains); i++ {

		if swag.IsZero(m.Contains[i]) { // not required
			continue
		}

		if m.Contains[i] != nil {

			if err := m.Contains[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Chassis100ChassisLinks) validateContainsAtOdataNavigationLink(formats strfmt.Registry) error {

	if swag.IsZero(m.ContainsAtOdataNavigationLink) { // not required
		return nil
	}

	if m.ContainsAtOdataNavigationLink != nil {

		if err := m.ContainsAtOdataNavigationLink.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Chassis100ChassisLinks) validateCooledBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CooledBy) { // not required
		return nil
	}

	for i := 0; i < len(m.CooledBy); i++ {

		if swag.IsZero(m.CooledBy[i]) { // not required
			continue
		}

		if m.CooledBy[i] != nil {

			if err := m.CooledBy[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Chassis100ChassisLinks) validateCooledByAtOdataNavigationLink(formats strfmt.Registry) error {

	if swag.IsZero(m.CooledByAtOdataNavigationLink) { // not required
		return nil
	}

	if m.CooledByAtOdataNavigationLink != nil {

		if err := m.CooledByAtOdataNavigationLink.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Chassis100ChassisLinks) validateManagedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagedBy) { // not required
		return nil
	}

	for i := 0; i < len(m.ManagedBy); i++ {

		if swag.IsZero(m.ManagedBy[i]) { // not required
			continue
		}

		if m.ManagedBy[i] != nil {

			if err := m.ManagedBy[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Chassis100ChassisLinks) validateManagedByAtOdataNavigationLink(formats strfmt.Registry) error {

	if swag.IsZero(m.ManagedByAtOdataNavigationLink) { // not required
		return nil
	}

	if m.ManagedByAtOdataNavigationLink != nil {

		if err := m.ManagedByAtOdataNavigationLink.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Chassis100ChassisLinks) validatePoweredBy(formats strfmt.Registry) error {

	if swag.IsZero(m.PoweredBy) { // not required
		return nil
	}

	for i := 0; i < len(m.PoweredBy); i++ {

		if swag.IsZero(m.PoweredBy[i]) { // not required
			continue
		}

		if m.PoweredBy[i] != nil {

			if err := m.PoweredBy[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Chassis100ChassisLinks) validatePoweredByAtOdataNavigationLink(formats strfmt.Registry) error {

	if swag.IsZero(m.PoweredByAtOdataNavigationLink) { // not required
		return nil
	}

	if m.PoweredByAtOdataNavigationLink != nil {

		if err := m.PoweredByAtOdataNavigationLink.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
