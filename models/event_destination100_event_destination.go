package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// EventDestination100EventDestination This is the base type for resources and referenceable members.
// swagger:model EventDestination.1.0.0_EventDestination
type EventDestination100EventDestination struct {

	// at odata context
	// Read Only: true
	AtOdataContext strfmt.URI `json:"@odata.context,omitempty"`

	// at odata id
	// Read Only: true
	AtOdataID strfmt.URI `json:"@odata.id,omitempty"`

	// at odata type
	// Read Only: true
	AtOdataType string `json:"@odata.type,omitempty"`

	// A client-supplied string that is stored with the event destination subscription.
	// Required: true
	Context *string `json:"Context"`

	// Provides a description of this resource and is used for commonality  in the schema definitions.
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// The URI of the destination Event Service.
	// Required: true
	// Read Only: true
	Destination string `json:"Destination"`

	// This property shall contain the types of events that shall be sent to the desination.
	// Required: true
	// Read Only: true
	EventTypes []string `json:"EventTypes"`

	// This is for setting HTTP headers, such as authorization information.  This object will be null on a GET.
	HTTPHeaders []EventDestination100HTTPHeaderProperty `json:"HttpHeaders"`

	// Uniquely identifies the resource within the collection of like resources.
	// Read Only: true
	ID string `json:"Id,omitempty"`

	// The name of the resource or array element.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	Oem ResourceOem `json:"Oem,omitempty"`

	// The protocol type of the event connection.
	// Required: true
	// Read Only: true
	Protocol string `json:"Protocol"`
}

// Validate validates this event destination 1 0 0 event destination
func (m *EventDestination100EventDestination) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContext(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEventTypes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHTTPHeaders(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventDestination100EventDestination) validateContext(formats strfmt.Registry) error {

	if err := validate.Required("Context", "body", m.Context); err != nil {
		return err
	}

	return nil
}

func (m *EventDestination100EventDestination) validateDestination(formats strfmt.Registry) error {

	if err := validate.RequiredString("Destination", "body", string(m.Destination)); err != nil {
		return err
	}

	return nil
}

var eventDestination100EventDestinationEventTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["StatusChange","ResourceUpdated","ResourceAdded","ResourceRemoved","Alert"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventDestination100EventDestinationEventTypesItemsEnum = append(eventDestination100EventDestinationEventTypesItemsEnum, v)
	}
}

func (m *EventDestination100EventDestination) validateEventTypesItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, eventDestination100EventDestinationEventTypesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventDestination100EventDestination) validateEventTypes(formats strfmt.Registry) error {

	if err := validate.Required("EventTypes", "body", m.EventTypes); err != nil {
		return err
	}

	for i := 0; i < len(m.EventTypes); i++ {

		// value enum
		if err := m.validateEventTypesItemsEnum("EventTypes"+"."+strconv.Itoa(i), "body", m.EventTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *EventDestination100EventDestination) validateHTTPHeaders(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPHeaders) { // not required
		return nil
	}

	return nil
}

var eventDestination100EventDestinationTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Redfish"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventDestination100EventDestinationTypeProtocolPropEnum = append(eventDestination100EventDestinationTypeProtocolPropEnum, v)
	}
}

const (
	// EventDestination100EventDestinationProtocolRedfish captures enum value "Redfish"
	EventDestination100EventDestinationProtocolRedfish string = "Redfish"
)

// prop value enum
func (m *EventDestination100EventDestination) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, eventDestination100EventDestinationTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventDestination100EventDestination) validateProtocol(formats strfmt.Registry) error {

	if err := validate.RequiredString("Protocol", "body", string(m.Protocol)); err != nil {
		return err
	}

	// value enum
	if err := m.validateProtocolEnum("Protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}
