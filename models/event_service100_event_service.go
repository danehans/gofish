package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// EventService100EventService This is the schema definition for the Event Service. It represents the properties for the service itself and has links to the actual list of subscriptions.
// swagger:model EventService.1.0.0_EventService
type EventService100EventService struct {

	// at odata context
	// Read Only: true
	AtOdataContext strfmt.URI `json:"@odata.context,omitempty"`

	// at odata id
	// Read Only: true
	AtOdataID strfmt.URI `json:"@odata.id,omitempty"`

	// at odata type
	// Read Only: true
	AtOdataType string `json:"@odata.type,omitempty"`

	// actions
	Actions *EventService100EventServiceActions `json:"Actions,omitempty"`

	// This is the number of attempts an event posting is retried before the subscription is terminated.
	// Read Only: true
	DeliveryRetryAttempts float64 `json:"DeliveryRetryAttempts,omitempty"`

	// This represents the number of seconds between retry attempts for sending any given Event
	// Read Only: true
	DeliveryRetryIntervalSeconds float64 `json:"DeliveryRetryIntervalSeconds,omitempty"`

	// Provides a description of this resource and is used for commonality  in the schema definitions.
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// This is the types of Events that can be subscribed to.
	// Read Only: true
	EventTypesForSubscription []string `json:"EventTypesForSubscription"`

	// Uniquely identifies the resource within the collection of like resources.
	// Read Only: true
	ID string `json:"Id,omitempty"`

	// The name of the resource or array element.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	Oem ResourceOem `json:"Oem,omitempty"`

	// This indicates whether this service is enabled.
	ServiceEnabled bool `json:"ServiceEnabled,omitempty"`

	// status
	Status *ResourceStatus `json:"Status,omitempty"`

	// This is a reference to a collection of Event Destination resources.
	// Read Only: true
	Subscriptions *EventDestinationCollectionEventDestinationCollection `json:"Subscriptions,omitempty"`
}

// Validate validates this event service 1 0 0 event service
func (m *EventService100EventService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEventTypesForSubscription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubscriptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventService100EventService) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	if m.Actions != nil {

		if err := m.Actions.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var eventService100EventServiceEventTypesForSubscriptionItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["StatusChange","ResourceUpdated","ResourceAdded","ResourceRemoved","Alert"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventService100EventServiceEventTypesForSubscriptionItemsEnum = append(eventService100EventServiceEventTypesForSubscriptionItemsEnum, v)
	}
}

func (m *EventService100EventService) validateEventTypesForSubscriptionItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, eventService100EventServiceEventTypesForSubscriptionItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventService100EventService) validateEventTypesForSubscription(formats strfmt.Registry) error {

	if swag.IsZero(m.EventTypesForSubscription) { // not required
		return nil
	}

	for i := 0; i < len(m.EventTypesForSubscription); i++ {

		// value enum
		if err := m.validateEventTypesForSubscriptionItemsEnum("EventTypesForSubscription"+"."+strconv.Itoa(i), "body", m.EventTypesForSubscription[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *EventService100EventService) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {

		if err := m.Status.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *EventService100EventService) validateSubscriptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Subscriptions) { // not required
		return nil
	}

	if m.Subscriptions != nil {

		if err := m.Subscriptions.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// EventService100EventServiceActions The Actions object contains the available custom actions on this resource.
// swagger:model EventService100EventServiceActions
type EventService100EventServiceActions struct {

	// event service submit test event
	NrEventServiceSubmitTestEvent *EventService100SubmitTestEvent `json:"#EventService.SubmitTestEvent,omitempty"`

	// oem
	Oem interface{} `json:"Oem,omitempty"`
}

// Validate validates this event service100 event service actions
func (m *EventService100EventServiceActions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNrEventServiceSubmitTestEvent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventService100EventServiceActions) validateNrEventServiceSubmitTestEvent(formats strfmt.Registry) error {

	if swag.IsZero(m.NrEventServiceSubmitTestEvent) { // not required
		return nil
	}

	if m.NrEventServiceSubmitTestEvent != nil {

		if err := m.NrEventServiceSubmitTestEvent.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
