package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// LogEntry100LogEntry This resource represents the log record format for logs.  It is designed to be used for SEL logs from IPMI as well as Event Logs and OEM specific logs.  The EntryType field indicates the type of log and there are other properties dependent on it's value.
// swagger:model LogEntry.1.0.0_LogEntry
type LogEntry100LogEntry struct {

	// at odata context
	// Read Only: true
	AtOdataContext strfmt.URI `json:"@odata.context,omitempty"`

	// at odata id
	// Read Only: true
	AtOdataID strfmt.URI `json:"@odata.id,omitempty"`

	// at odata type
	// Read Only: true
	AtOdataType string `json:"@odata.type,omitempty"`

	// The time the log entry was created.
	// Read Only: true
	Created strfmt.DateTime `json:"Created,omitempty"`

	// Provides a description of this resource and is used for commonality  in the schema definitions.
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// If the EntryType is SEL, this will have the entry code for the log entry.
	// Read Only: true
	EntryCode string `json:"EntryCode,omitempty"`

	// his is the type of log entry.
	// Required: true
	// Read Only: true
	EntryType string `json:"EntryType"`

	// Uniquely identifies the resource within the collection of like resources.
	// Read Only: true
	ID string `json:"Id,omitempty"`

	// links
	Links *LogEntry100LogEntryLinks `json:"Links,omitempty"`

	// This property decodes from EntryType:  If it is Event then it is a message string.  Otherwise, it is SEL or Oem specific.  In most cases, this will be the actual Log Entry.
	// Read Only: true
	Message string `json:"Message,omitempty"`

	// The values of this property shall be any arguments for the message.
	// Read Only: true
	MessageArgs []string `json:"MessageArgs"`

	// This property decodes from EntryType:  If it is Event then it is a message id.  Otherwise, it is SEL or Oem specific.  This value is only used for registries - for more information, see the specification.
	// Read Only: true
	MessageID string `json:"MessageId,omitempty"`

	// The name of the resource or array element.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	Oem ResourceOem `json:"Oem,omitempty"`

	// If the entry type is Oem, this will contain more information about the record format from the Oem.
	// Read Only: true
	OemRecordFormat string `json:"OemRecordFormat,omitempty"`

	// This property decodes from EntryType:  If it is SEL, it is the sensor number; if Event then the count of events.  Otherwise, it is Oem specific.
	// Read Only: true
	SensorNumber float64 `json:"SensorNumber,omitempty"`

	// If the EntryType is SEL, this will have the sensor type that the log entry pertains to.
	// Read Only: true
	SensorType string `json:"SensorType,omitempty"`

	// This is the severity of the log entry.
	// Read Only: true
	Severity string `json:"Severity,omitempty"`
}

// Validate validates this log entry 1 0 0 log entry
func (m *LogEntry100LogEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntryCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEntryType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMessageArgs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSensorType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var logEntry100LogEntryTypeEntryCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Assert","Deassert","Lower Non-critical - going low","Lower Non-critical - going high","Lower Critical - going low","Lower Critical - going high","Lower Non-recoverable - going low","Lower Non-recoverable - going high","Upper Non-critical - going low","Upper Non-critical - going high","Upper Critical - going low","Upper Critical - going high","Upper Non-recoverable - going low","Upper Non-recoverable - going high","Transition to Idle","Transition to Active","Transition to Busy","State Deasserted","State Asserted","Predictive Failure deasserted","Predictive Failure asserted","Limit Not Exceeded","Limit Exceeded","Performance Met","Performance Lags","Transition to OK","Transition to Non-Critical from OK","Transition to Critical from less severe","Transition to Non-recoverable from less severe","Transition to Non-Critical from more severe","Transition to Critical from Non-recoverable","Transition to Non-recoverable","Monitor","Informational","Device Removed / Device Absent","Device Inserted / Device Present","Device Disabled","Device Enabled","Transition to Running","Transition to In Test","Transition to Power Off","Transition to On Line","Transition to Off Line","Transition to Off Duty","Transition to Degraded","Transition to Power Save","Install Error","Fully Redundant","Redundancy Lost","Redundancy Degraded","Non-redundant:Sufficient Resources from Redundant","Non-redundant:Sufficient Resources from Insufficient Resources","Non-redundant:Insufficient Resources","Redundancy Degraded from Fully Redundant","Redundancy Degraded from Non-redundant","D0 Power State","D1 Power State","D2 Power State","D3 Power State"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logEntry100LogEntryTypeEntryCodePropEnum = append(logEntry100LogEntryTypeEntryCodePropEnum, v)
	}
}

const (
	// LogEntry100LogEntryEntryCodeAssert captures enum value "Assert"
	LogEntry100LogEntryEntryCodeAssert string = "Assert"
	// LogEntry100LogEntryEntryCodeDeassert captures enum value "Deassert"
	LogEntry100LogEntryEntryCodeDeassert string = "Deassert"
	// LogEntry100LogEntryEntryCodeLowerNonCriticalGoingLow captures enum value "Lower Non-critical - going low"
	LogEntry100LogEntryEntryCodeLowerNonCriticalGoingLow string = "Lower Non-critical - going low"
	// LogEntry100LogEntryEntryCodeLowerNonCriticalGoingHigh captures enum value "Lower Non-critical - going high"
	LogEntry100LogEntryEntryCodeLowerNonCriticalGoingHigh string = "Lower Non-critical - going high"
	// LogEntry100LogEntryEntryCodeLowerCriticalGoingLow captures enum value "Lower Critical - going low"
	LogEntry100LogEntryEntryCodeLowerCriticalGoingLow string = "Lower Critical - going low"
	// LogEntry100LogEntryEntryCodeLowerCriticalGoingHigh captures enum value "Lower Critical - going high"
	LogEntry100LogEntryEntryCodeLowerCriticalGoingHigh string = "Lower Critical - going high"
	// LogEntry100LogEntryEntryCodeLowerNonRecoverableGoingLow captures enum value "Lower Non-recoverable - going low"
	LogEntry100LogEntryEntryCodeLowerNonRecoverableGoingLow string = "Lower Non-recoverable - going low"
	// LogEntry100LogEntryEntryCodeLowerNonRecoverableGoingHigh captures enum value "Lower Non-recoverable - going high"
	LogEntry100LogEntryEntryCodeLowerNonRecoverableGoingHigh string = "Lower Non-recoverable - going high"
	// LogEntry100LogEntryEntryCodeUpperNonCriticalGoingLow captures enum value "Upper Non-critical - going low"
	LogEntry100LogEntryEntryCodeUpperNonCriticalGoingLow string = "Upper Non-critical - going low"
	// LogEntry100LogEntryEntryCodeUpperNonCriticalGoingHigh captures enum value "Upper Non-critical - going high"
	LogEntry100LogEntryEntryCodeUpperNonCriticalGoingHigh string = "Upper Non-critical - going high"
	// LogEntry100LogEntryEntryCodeUpperCriticalGoingLow captures enum value "Upper Critical - going low"
	LogEntry100LogEntryEntryCodeUpperCriticalGoingLow string = "Upper Critical - going low"
	// LogEntry100LogEntryEntryCodeUpperCriticalGoingHigh captures enum value "Upper Critical - going high"
	LogEntry100LogEntryEntryCodeUpperCriticalGoingHigh string = "Upper Critical - going high"
	// LogEntry100LogEntryEntryCodeUpperNonRecoverableGoingLow captures enum value "Upper Non-recoverable - going low"
	LogEntry100LogEntryEntryCodeUpperNonRecoverableGoingLow string = "Upper Non-recoverable - going low"
	// LogEntry100LogEntryEntryCodeUpperNonRecoverableGoingHigh captures enum value "Upper Non-recoverable - going high"
	LogEntry100LogEntryEntryCodeUpperNonRecoverableGoingHigh string = "Upper Non-recoverable - going high"
	// LogEntry100LogEntryEntryCodeTransitionToIDLE captures enum value "Transition to Idle"
	LogEntry100LogEntryEntryCodeTransitionToIDLE string = "Transition to Idle"
	// LogEntry100LogEntryEntryCodeTransitionToActive captures enum value "Transition to Active"
	LogEntry100LogEntryEntryCodeTransitionToActive string = "Transition to Active"
	// LogEntry100LogEntryEntryCodeTransitionToBusy captures enum value "Transition to Busy"
	LogEntry100LogEntryEntryCodeTransitionToBusy string = "Transition to Busy"
	// LogEntry100LogEntryEntryCodeStateDeasserted captures enum value "State Deasserted"
	LogEntry100LogEntryEntryCodeStateDeasserted string = "State Deasserted"
	// LogEntry100LogEntryEntryCodeStateAsserted captures enum value "State Asserted"
	LogEntry100LogEntryEntryCodeStateAsserted string = "State Asserted"
	// LogEntry100LogEntryEntryCodePredictiveFailureDeasserted captures enum value "Predictive Failure deasserted"
	LogEntry100LogEntryEntryCodePredictiveFailureDeasserted string = "Predictive Failure deasserted"
	// LogEntry100LogEntryEntryCodePredictiveFailureAsserted captures enum value "Predictive Failure asserted"
	LogEntry100LogEntryEntryCodePredictiveFailureAsserted string = "Predictive Failure asserted"
	// LogEntry100LogEntryEntryCodeLimitNotExceeded captures enum value "Limit Not Exceeded"
	LogEntry100LogEntryEntryCodeLimitNotExceeded string = "Limit Not Exceeded"
	// LogEntry100LogEntryEntryCodeLimitExceeded captures enum value "Limit Exceeded"
	LogEntry100LogEntryEntryCodeLimitExceeded string = "Limit Exceeded"
	// LogEntry100LogEntryEntryCodePerformanceMet captures enum value "Performance Met"
	LogEntry100LogEntryEntryCodePerformanceMet string = "Performance Met"
	// LogEntry100LogEntryEntryCodePerformanceLags captures enum value "Performance Lags"
	LogEntry100LogEntryEntryCodePerformanceLags string = "Performance Lags"
	// LogEntry100LogEntryEntryCodeTransitionToOK captures enum value "Transition to OK"
	LogEntry100LogEntryEntryCodeTransitionToOK string = "Transition to OK"
	// LogEntry100LogEntryEntryCodeTransitionToNonCriticalFromOK captures enum value "Transition to Non-Critical from OK"
	LogEntry100LogEntryEntryCodeTransitionToNonCriticalFromOK string = "Transition to Non-Critical from OK"
	// LogEntry100LogEntryEntryCodeTransitionToCriticalFromLessSevere captures enum value "Transition to Critical from less severe"
	LogEntry100LogEntryEntryCodeTransitionToCriticalFromLessSevere string = "Transition to Critical from less severe"
	// LogEntry100LogEntryEntryCodeTransitionToNonRecoverableFromLessSevere captures enum value "Transition to Non-recoverable from less severe"
	LogEntry100LogEntryEntryCodeTransitionToNonRecoverableFromLessSevere string = "Transition to Non-recoverable from less severe"
	// LogEntry100LogEntryEntryCodeTransitionToNonCriticalFromMoreSevere captures enum value "Transition to Non-Critical from more severe"
	LogEntry100LogEntryEntryCodeTransitionToNonCriticalFromMoreSevere string = "Transition to Non-Critical from more severe"
	// LogEntry100LogEntryEntryCodeTransitionToCriticalFromNonRecoverable captures enum value "Transition to Critical from Non-recoverable"
	LogEntry100LogEntryEntryCodeTransitionToCriticalFromNonRecoverable string = "Transition to Critical from Non-recoverable"
	// LogEntry100LogEntryEntryCodeTransitionToNonRecoverable captures enum value "Transition to Non-recoverable"
	LogEntry100LogEntryEntryCodeTransitionToNonRecoverable string = "Transition to Non-recoverable"
	// LogEntry100LogEntryEntryCodeMonitor captures enum value "Monitor"
	LogEntry100LogEntryEntryCodeMonitor string = "Monitor"
	// LogEntry100LogEntryEntryCodeInformational captures enum value "Informational"
	LogEntry100LogEntryEntryCodeInformational string = "Informational"
	// LogEntry100LogEntryEntryCodeDeviceRemovedDeviceAbsent captures enum value "Device Removed / Device Absent"
	LogEntry100LogEntryEntryCodeDeviceRemovedDeviceAbsent string = "Device Removed / Device Absent"
	// LogEntry100LogEntryEntryCodeDeviceInsertedDevicePresent captures enum value "Device Inserted / Device Present"
	LogEntry100LogEntryEntryCodeDeviceInsertedDevicePresent string = "Device Inserted / Device Present"
	// LogEntry100LogEntryEntryCodeDeviceDisabled captures enum value "Device Disabled"
	LogEntry100LogEntryEntryCodeDeviceDisabled string = "Device Disabled"
	// LogEntry100LogEntryEntryCodeDeviceEnabled captures enum value "Device Enabled"
	LogEntry100LogEntryEntryCodeDeviceEnabled string = "Device Enabled"
	// LogEntry100LogEntryEntryCodeTransitionToRunning captures enum value "Transition to Running"
	LogEntry100LogEntryEntryCodeTransitionToRunning string = "Transition to Running"
	// LogEntry100LogEntryEntryCodeTransitionToInTest captures enum value "Transition to In Test"
	LogEntry100LogEntryEntryCodeTransitionToInTest string = "Transition to In Test"
	// LogEntry100LogEntryEntryCodeTransitionToPowerOff captures enum value "Transition to Power Off"
	LogEntry100LogEntryEntryCodeTransitionToPowerOff string = "Transition to Power Off"
	// LogEntry100LogEntryEntryCodeTransitionToOnLine captures enum value "Transition to On Line"
	LogEntry100LogEntryEntryCodeTransitionToOnLine string = "Transition to On Line"
	// LogEntry100LogEntryEntryCodeTransitionToOffLine captures enum value "Transition to Off Line"
	LogEntry100LogEntryEntryCodeTransitionToOffLine string = "Transition to Off Line"
	// LogEntry100LogEntryEntryCodeTransitionToOffDuty captures enum value "Transition to Off Duty"
	LogEntry100LogEntryEntryCodeTransitionToOffDuty string = "Transition to Off Duty"
	// LogEntry100LogEntryEntryCodeTransitionToDegraded captures enum value "Transition to Degraded"
	LogEntry100LogEntryEntryCodeTransitionToDegraded string = "Transition to Degraded"
	// LogEntry100LogEntryEntryCodeTransitionToPowerSave captures enum value "Transition to Power Save"
	LogEntry100LogEntryEntryCodeTransitionToPowerSave string = "Transition to Power Save"
	// LogEntry100LogEntryEntryCodeInstallError captures enum value "Install Error"
	LogEntry100LogEntryEntryCodeInstallError string = "Install Error"
	// LogEntry100LogEntryEntryCodeFullyRedundant captures enum value "Fully Redundant"
	LogEntry100LogEntryEntryCodeFullyRedundant string = "Fully Redundant"
	// LogEntry100LogEntryEntryCodeRedundancyLost captures enum value "Redundancy Lost"
	LogEntry100LogEntryEntryCodeRedundancyLost string = "Redundancy Lost"
	// LogEntry100LogEntryEntryCodeRedundancyDegraded captures enum value "Redundancy Degraded"
	LogEntry100LogEntryEntryCodeRedundancyDegraded string = "Redundancy Degraded"
	// LogEntry100LogEntryEntryCodeNonRedundantSufficientResourcesFromRedundant captures enum value "Non-redundant:Sufficient Resources from Redundant"
	LogEntry100LogEntryEntryCodeNonRedundantSufficientResourcesFromRedundant string = "Non-redundant:Sufficient Resources from Redundant"
	// LogEntry100LogEntryEntryCodeNonRedundantSufficientResourcesFromInsufficientResources captures enum value "Non-redundant:Sufficient Resources from Insufficient Resources"
	LogEntry100LogEntryEntryCodeNonRedundantSufficientResourcesFromInsufficientResources string = "Non-redundant:Sufficient Resources from Insufficient Resources"
	// LogEntry100LogEntryEntryCodeNonRedundantInsufficientResources captures enum value "Non-redundant:Insufficient Resources"
	LogEntry100LogEntryEntryCodeNonRedundantInsufficientResources string = "Non-redundant:Insufficient Resources"
	// LogEntry100LogEntryEntryCodeRedundancyDegradedFromFullyRedundant captures enum value "Redundancy Degraded from Fully Redundant"
	LogEntry100LogEntryEntryCodeRedundancyDegradedFromFullyRedundant string = "Redundancy Degraded from Fully Redundant"
	// LogEntry100LogEntryEntryCodeRedundancyDegradedFromNonRedundant captures enum value "Redundancy Degraded from Non-redundant"
	LogEntry100LogEntryEntryCodeRedundancyDegradedFromNonRedundant string = "Redundancy Degraded from Non-redundant"
	// LogEntry100LogEntryEntryCodeD0PowerState captures enum value "D0 Power State"
	LogEntry100LogEntryEntryCodeD0PowerState string = "D0 Power State"
	// LogEntry100LogEntryEntryCodeD1PowerState captures enum value "D1 Power State"
	LogEntry100LogEntryEntryCodeD1PowerState string = "D1 Power State"
	// LogEntry100LogEntryEntryCodeD2PowerState captures enum value "D2 Power State"
	LogEntry100LogEntryEntryCodeD2PowerState string = "D2 Power State"
	// LogEntry100LogEntryEntryCodeD3PowerState captures enum value "D3 Power State"
	LogEntry100LogEntryEntryCodeD3PowerState string = "D3 Power State"
)

// prop value enum
func (m *LogEntry100LogEntry) validateEntryCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, logEntry100LogEntryTypeEntryCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LogEntry100LogEntry) validateEntryCode(formats strfmt.Registry) error {

	if swag.IsZero(m.EntryCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntryCodeEnum("EntryCode", "body", m.EntryCode); err != nil {
		return err
	}

	return nil
}

var logEntry100LogEntryTypeEntryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Event","SEL","Oem"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logEntry100LogEntryTypeEntryTypePropEnum = append(logEntry100LogEntryTypeEntryTypePropEnum, v)
	}
}

const (
	// LogEntry100LogEntryEntryTypeEvent captures enum value "Event"
	LogEntry100LogEntryEntryTypeEvent string = "Event"
	// LogEntry100LogEntryEntryTypeSEL captures enum value "SEL"
	LogEntry100LogEntryEntryTypeSEL string = "SEL"
	// LogEntry100LogEntryEntryTypeOem captures enum value "Oem"
	LogEntry100LogEntryEntryTypeOem string = "Oem"
)

// prop value enum
func (m *LogEntry100LogEntry) validateEntryTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, logEntry100LogEntryTypeEntryTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LogEntry100LogEntry) validateEntryType(formats strfmt.Registry) error {

	if err := validate.RequiredString("EntryType", "body", string(m.EntryType)); err != nil {
		return err
	}

	// value enum
	if err := m.validateEntryTypeEnum("EntryType", "body", m.EntryType); err != nil {
		return err
	}

	return nil
}

func (m *LogEntry100LogEntry) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {

		if err := m.Links.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *LogEntry100LogEntry) validateMessageArgs(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageArgs) { // not required
		return nil
	}

	return nil
}

var logEntry100LogEntryTypeSensorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Platform Security Violation Attempt","Temperature","Voltage","Current","Fan","Physical Chassis Security","Processor","Power Supply / Converter","PowerUnit","CoolingDevice","Other Units-based Sensor","Memory","Drive Slot/Bay","POST Memory Resize","System Firmware Progress","Event Logging Disabled","System Event","Critical Interrupt","Button/Switch","Module/Board","Microcontroller/Coprocessor","Add-in Card","Chassis","ChipSet","Other FRU","Cable/Interconnect","Terminator","SystemBoot/Restart","Boot Error","BaseOSBoot/InstallationStatus","OS Stop/Shutdown","Slot/Connector","System ACPI PowerState","Watchdog","Platform Alert","Entity Presence","Monitor ASIC/IC","LAN","Management Subsystem Health","Battery","Session Audit","Version Change","FRUState"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logEntry100LogEntryTypeSensorTypePropEnum = append(logEntry100LogEntryTypeSensorTypePropEnum, v)
	}
}

const (
	// LogEntry100LogEntrySensorTypePlatformSecurityViolationAttempt captures enum value "Platform Security Violation Attempt"
	LogEntry100LogEntrySensorTypePlatformSecurityViolationAttempt string = "Platform Security Violation Attempt"
	// LogEntry100LogEntrySensorTypeTemperature captures enum value "Temperature"
	LogEntry100LogEntrySensorTypeTemperature string = "Temperature"
	// LogEntry100LogEntrySensorTypeVoltage captures enum value "Voltage"
	LogEntry100LogEntrySensorTypeVoltage string = "Voltage"
	// LogEntry100LogEntrySensorTypeCurrent captures enum value "Current"
	LogEntry100LogEntrySensorTypeCurrent string = "Current"
	// LogEntry100LogEntrySensorTypeFan captures enum value "Fan"
	LogEntry100LogEntrySensorTypeFan string = "Fan"
	// LogEntry100LogEntrySensorTypePhysicalChassisSecurity captures enum value "Physical Chassis Security"
	LogEntry100LogEntrySensorTypePhysicalChassisSecurity string = "Physical Chassis Security"
	// LogEntry100LogEntrySensorTypeProcessor captures enum value "Processor"
	LogEntry100LogEntrySensorTypeProcessor string = "Processor"
	// LogEntry100LogEntrySensorTypePowerSupplyConverter captures enum value "Power Supply / Converter"
	LogEntry100LogEntrySensorTypePowerSupplyConverter string = "Power Supply / Converter"
	// LogEntry100LogEntrySensorTypePowerUnit captures enum value "PowerUnit"
	LogEntry100LogEntrySensorTypePowerUnit string = "PowerUnit"
	// LogEntry100LogEntrySensorTypeCoolingDevice captures enum value "CoolingDevice"
	LogEntry100LogEntrySensorTypeCoolingDevice string = "CoolingDevice"
	// LogEntry100LogEntrySensorTypeOtherUnitsBasedSensor captures enum value "Other Units-based Sensor"
	LogEntry100LogEntrySensorTypeOtherUnitsBasedSensor string = "Other Units-based Sensor"
	// LogEntry100LogEntrySensorTypeMemory captures enum value "Memory"
	LogEntry100LogEntrySensorTypeMemory string = "Memory"
	// LogEntry100LogEntrySensorTypeDriveSlotBay captures enum value "Drive Slot/Bay"
	LogEntry100LogEntrySensorTypeDriveSlotBay string = "Drive Slot/Bay"
	// LogEntry100LogEntrySensorTypePOSTMemoryResize captures enum value "POST Memory Resize"
	LogEntry100LogEntrySensorTypePOSTMemoryResize string = "POST Memory Resize"
	// LogEntry100LogEntrySensorTypeSystemFirmwareProgress captures enum value "System Firmware Progress"
	LogEntry100LogEntrySensorTypeSystemFirmwareProgress string = "System Firmware Progress"
	// LogEntry100LogEntrySensorTypeEventLoggingDisabled captures enum value "Event Logging Disabled"
	LogEntry100LogEntrySensorTypeEventLoggingDisabled string = "Event Logging Disabled"
	// LogEntry100LogEntrySensorTypeSystemEvent captures enum value "System Event"
	LogEntry100LogEntrySensorTypeSystemEvent string = "System Event"
	// LogEntry100LogEntrySensorTypeCriticalInterrupt captures enum value "Critical Interrupt"
	LogEntry100LogEntrySensorTypeCriticalInterrupt string = "Critical Interrupt"
	// LogEntry100LogEntrySensorTypeButtonSwitch captures enum value "Button/Switch"
	LogEntry100LogEntrySensorTypeButtonSwitch string = "Button/Switch"
	// LogEntry100LogEntrySensorTypeModuleBoard captures enum value "Module/Board"
	LogEntry100LogEntrySensorTypeModuleBoard string = "Module/Board"
	// LogEntry100LogEntrySensorTypeMicrocontrollerCoprocessor captures enum value "Microcontroller/Coprocessor"
	LogEntry100LogEntrySensorTypeMicrocontrollerCoprocessor string = "Microcontroller/Coprocessor"
	// LogEntry100LogEntrySensorTypeAddInCard captures enum value "Add-in Card"
	LogEntry100LogEntrySensorTypeAddInCard string = "Add-in Card"
	// LogEntry100LogEntrySensorTypeChassis captures enum value "Chassis"
	LogEntry100LogEntrySensorTypeChassis string = "Chassis"
	// LogEntry100LogEntrySensorTypeChipSet captures enum value "ChipSet"
	LogEntry100LogEntrySensorTypeChipSet string = "ChipSet"
	// LogEntry100LogEntrySensorTypeOtherFRU captures enum value "Other FRU"
	LogEntry100LogEntrySensorTypeOtherFRU string = "Other FRU"
	// LogEntry100LogEntrySensorTypeCableInterconnect captures enum value "Cable/Interconnect"
	LogEntry100LogEntrySensorTypeCableInterconnect string = "Cable/Interconnect"
	// LogEntry100LogEntrySensorTypeTerminator captures enum value "Terminator"
	LogEntry100LogEntrySensorTypeTerminator string = "Terminator"
	// LogEntry100LogEntrySensorTypeSystemBootRestart captures enum value "SystemBoot/Restart"
	LogEntry100LogEntrySensorTypeSystemBootRestart string = "SystemBoot/Restart"
	// LogEntry100LogEntrySensorTypeBootError captures enum value "Boot Error"
	LogEntry100LogEntrySensorTypeBootError string = "Boot Error"
	// LogEntry100LogEntrySensorTypeBaseOSBootInstallationStatus captures enum value "BaseOSBoot/InstallationStatus"
	LogEntry100LogEntrySensorTypeBaseOSBootInstallationStatus string = "BaseOSBoot/InstallationStatus"
	// LogEntry100LogEntrySensorTypeOSStopShutdown captures enum value "OS Stop/Shutdown"
	LogEntry100LogEntrySensorTypeOSStopShutdown string = "OS Stop/Shutdown"
	// LogEntry100LogEntrySensorTypeSlotConnector captures enum value "Slot/Connector"
	LogEntry100LogEntrySensorTypeSlotConnector string = "Slot/Connector"
	// LogEntry100LogEntrySensorTypeSystemACPIPowerState captures enum value "System ACPI PowerState"
	LogEntry100LogEntrySensorTypeSystemACPIPowerState string = "System ACPI PowerState"
	// LogEntry100LogEntrySensorTypeWatchdog captures enum value "Watchdog"
	LogEntry100LogEntrySensorTypeWatchdog string = "Watchdog"
	// LogEntry100LogEntrySensorTypePlatformAlert captures enum value "Platform Alert"
	LogEntry100LogEntrySensorTypePlatformAlert string = "Platform Alert"
	// LogEntry100LogEntrySensorTypeEntityPresence captures enum value "Entity Presence"
	LogEntry100LogEntrySensorTypeEntityPresence string = "Entity Presence"
	// LogEntry100LogEntrySensorTypeMonitorASICIC captures enum value "Monitor ASIC/IC"
	LogEntry100LogEntrySensorTypeMonitorASICIC string = "Monitor ASIC/IC"
	// LogEntry100LogEntrySensorTypeLAN captures enum value "LAN"
	LogEntry100LogEntrySensorTypeLAN string = "LAN"
	// LogEntry100LogEntrySensorTypeManagementSubsystemHealth captures enum value "Management Subsystem Health"
	LogEntry100LogEntrySensorTypeManagementSubsystemHealth string = "Management Subsystem Health"
	// LogEntry100LogEntrySensorTypeBattery captures enum value "Battery"
	LogEntry100LogEntrySensorTypeBattery string = "Battery"
	// LogEntry100LogEntrySensorTypeSessionAudit captures enum value "Session Audit"
	LogEntry100LogEntrySensorTypeSessionAudit string = "Session Audit"
	// LogEntry100LogEntrySensorTypeVersionChange captures enum value "Version Change"
	LogEntry100LogEntrySensorTypeVersionChange string = "Version Change"
	// LogEntry100LogEntrySensorTypeFRUState captures enum value "FRUState"
	LogEntry100LogEntrySensorTypeFRUState string = "FRUState"
)

// prop value enum
func (m *LogEntry100LogEntry) validateSensorTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, logEntry100LogEntryTypeSensorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LogEntry100LogEntry) validateSensorType(formats strfmt.Registry) error {

	if swag.IsZero(m.SensorType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSensorTypeEnum("SensorType", "body", m.SensorType); err != nil {
		return err
	}

	return nil
}

var logEntry100LogEntryTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OK","Warning","Critical"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logEntry100LogEntryTypeSeverityPropEnum = append(logEntry100LogEntryTypeSeverityPropEnum, v)
	}
}

const (
	// LogEntry100LogEntrySeverityOK captures enum value "OK"
	LogEntry100LogEntrySeverityOK string = "OK"
	// LogEntry100LogEntrySeverityWarning captures enum value "Warning"
	LogEntry100LogEntrySeverityWarning string = "Warning"
	// LogEntry100LogEntrySeverityCritical captures enum value "Critical"
	LogEntry100LogEntrySeverityCritical string = "Critical"
)

// prop value enum
func (m *LogEntry100LogEntry) validateSeverityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, logEntry100LogEntryTypeSeverityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LogEntry100LogEntry) validateSeverity(formats strfmt.Registry) error {

	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("Severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

// LogEntry100LogEntryLinks The links object contains the links to other resources that are related to this resource.
// swagger:model LogEntry100LogEntryLinks
type LogEntry100LogEntryLinks struct {

	// Oem extension object.
	Oem ResourceOem `json:"Oem,omitempty"`

	// This is the URI of the resource that caused the log entry
	// Read Only: true
	OriginOfCondition *Odata400IDRef `json:"OriginOfCondition,omitempty"`
}

// Validate validates this log entry100 log entry links
func (m *LogEntry100LogEntryLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOriginOfCondition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogEntry100LogEntryLinks) validateOriginOfCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.OriginOfCondition) { // not required
		return nil
	}

	if m.OriginOfCondition != nil {

		if err := m.OriginOfCondition.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
