package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// LogService100LogService This resource represents the log service for the resource or service to which it is associated.
// swagger:model LogService.1.0.0_LogService
type LogService100LogService struct {

	// at odata context
	// Read Only: true
	AtOdataContext strfmt.URI `json:"@odata.context,omitempty"`

	// at odata id
	// Read Only: true
	AtOdataID strfmt.URI `json:"@odata.id,omitempty"`

	// at odata type
	// Read Only: true
	AtOdataType string `json:"@odata.type,omitempty"`

	// actions
	Actions *LogService100LogServiceActions `json:"Actions,omitempty"`

	// The current DateTime (with offset) for the log service, used to set or read time.
	DateTime strfmt.DateTime `json:"DateTime,omitempty"`

	// The time offset from UTC that the DateTime property is set to in format: +06:00 .
	// Pattern: ([-+][0-1][0-9]:[0-5][0-9])
	DateTimeLocalOffset string `json:"DateTimeLocalOffset,omitempty"`

	// Provides a description of this resource and is used for commonality  in the schema definitions.
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// References to the log entry collection.
	// Read Only: true
	Entries *LogEntryCollectionLogEntryCollection `json:"Entries,omitempty"`

	// Uniquely identifies the resource within the collection of like resources.
	// Read Only: true
	ID string `json:"Id,omitempty"`

	// The maximum number of log entries this service can have.
	// Read Only: true
	// Minimum: 0
	MaxNumberOfRecords float64 `json:"MaxNumberOfRecords,omitempty"`

	// The name of the resource or array element.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	Oem ResourceOem `json:"Oem,omitempty"`

	// The overwrite policy for this service that takes place when the log is full.
	// Read Only: true
	OverWritePolicy string `json:"OverWritePolicy,omitempty"`

	// This indicates whether this service is enabled.
	ServiceEnabled bool `json:"ServiceEnabled,omitempty"`

	// status
	Status *ResourceStatus `json:"Status,omitempty"`
}

// Validate validates this log service 1 0 0 log service
func (m *LogService100LogService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDateTimeLocalOffset(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEntries(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMaxNumberOfRecords(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOverWritePolicy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogService100LogService) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	if m.Actions != nil {

		if err := m.Actions.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *LogService100LogService) validateDateTimeLocalOffset(formats strfmt.Registry) error {

	if swag.IsZero(m.DateTimeLocalOffset) { // not required
		return nil
	}

	if err := validate.Pattern("DateTimeLocalOffset", "body", string(m.DateTimeLocalOffset), `([-+][0-1][0-9]:[0-5][0-9])`); err != nil {
		return err
	}

	return nil
}

func (m *LogService100LogService) validateEntries(formats strfmt.Registry) error {

	if swag.IsZero(m.Entries) { // not required
		return nil
	}

	if m.Entries != nil {

		if err := m.Entries.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *LogService100LogService) validateMaxNumberOfRecords(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxNumberOfRecords) { // not required
		return nil
	}

	if err := validate.Minimum("MaxNumberOfRecords", "body", float64(m.MaxNumberOfRecords), 0, false); err != nil {
		return err
	}

	return nil
}

var logService100LogServiceTypeOverWritePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","WrapsWhenFull","NeverOverWrites"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logService100LogServiceTypeOverWritePolicyPropEnum = append(logService100LogServiceTypeOverWritePolicyPropEnum, v)
	}
}

const (
	// LogService100LogServiceOverWritePolicyUnknown captures enum value "Unknown"
	LogService100LogServiceOverWritePolicyUnknown string = "Unknown"
	// LogService100LogServiceOverWritePolicyWrapsWhenFull captures enum value "WrapsWhenFull"
	LogService100LogServiceOverWritePolicyWrapsWhenFull string = "WrapsWhenFull"
	// LogService100LogServiceOverWritePolicyNeverOverWrites captures enum value "NeverOverWrites"
	LogService100LogServiceOverWritePolicyNeverOverWrites string = "NeverOverWrites"
)

// prop value enum
func (m *LogService100LogService) validateOverWritePolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, logService100LogServiceTypeOverWritePolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LogService100LogService) validateOverWritePolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.OverWritePolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateOverWritePolicyEnum("OverWritePolicy", "body", m.OverWritePolicy); err != nil {
		return err
	}

	return nil
}

func (m *LogService100LogService) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {

		if err := m.Status.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// LogService100LogServiceActions The Actions object contains the available custom actions on this resource.
// swagger:model LogService100LogServiceActions
type LogService100LogServiceActions struct {

	// log service clear log
	NrLogServiceClearLog *LogService100ClearLog `json:"#LogService.ClearLog,omitempty"`

	// oem
	Oem interface{} `json:"Oem,omitempty"`
}

// Validate validates this log service100 log service actions
func (m *LogService100LogServiceActions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNrLogServiceClearLog(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogService100LogServiceActions) validateNrLogServiceClearLog(formats strfmt.Registry) error {

	if swag.IsZero(m.NrLogServiceClearLog) { // not required
		return nil
	}

	if m.NrLogServiceClearLog != nil {

		if err := m.NrLogServiceClearLog.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
