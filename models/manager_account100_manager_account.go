package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// ManagerAccount100ManagerAccount This schema defines a user account to be used in conjunction with a manager.  This will affect the Redfish service connection if this manager is responsible for the Redfish service.
// swagger:model ManagerAccount.1.0.0_ManagerAccount
type ManagerAccount100ManagerAccount struct {

	// at odata context
	// Read Only: true
	AtOdataContext strfmt.URI `json:"@odata.context,omitempty"`

	// at odata id
	// Read Only: true
	AtOdataID strfmt.URI `json:"@odata.id,omitempty"`

	// at odata type
	// Read Only: true
	AtOdataType string `json:"@odata.type,omitempty"`

	// Provides a description of this resource and is used for commonality  in the schema definitions.
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// This property is used by a User Administrator to disable an account w/o having to delet the user information.  When set to true, the user can login.  When set to false, the account is administratively disabled and the user cannot login.
	Enabled bool `json:"Enabled,omitempty"`

	// Uniquely identifies the resource within the collection of like resources.
	// Read Only: true
	ID string `json:"Id,omitempty"`

	// links
	Links *ManagerAccount100ManagerAccountLinks `json:"Links,omitempty"`

	// This property indicates that the account has been auto-locked by the account service because the lockout threshold has been exceeded.  When set to true, the account is locked. A user admin can write the property to false to manually unlock, or the account service will unlock it once the lockout duration period has passed.
	Locked bool `json:"Locked,omitempty"`

	// The name of the resource or array element.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	Oem ResourceOem `json:"Oem,omitempty"`

	// This property is used with a PATCH or PUT to write the password for the account.  This property is null on a GET.
	Password string `json:"Password,omitempty"`

	// This property contains the Role for this account.
	RoleID string `json:"RoleId,omitempty"`

	// This property contains the user name for the account.
	UserName string `json:"UserName,omitempty"`
}

// Validate validates this manager account 1 0 0 manager account
func (m *ManagerAccount100ManagerAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ManagerAccount100ManagerAccount) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {

		if err := m.Links.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

// ManagerAccount100ManagerAccountLinks The links object contains the links to other resources that are related to this resource.
// swagger:model ManagerAccount100ManagerAccountLinks
type ManagerAccount100ManagerAccountLinks struct {

	// Oem extension object.
	Oem ResourceOem `json:"Oem,omitempty"`

	// A reference to the Role object defining Privileges for this account--returned when the resource is read. The ID of the role is the same as property RoleId.
	// Read Only: true
	Role *Odata400IDRef `json:"Role,omitempty"`
}

// Validate validates this manager account100 manager account links
func (m *ManagerAccount100ManagerAccountLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ManagerAccount100ManagerAccountLinks) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if m.Role != nil {

		if err := m.Role.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
