package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ManagerAccount100ManagerAccountPost manager account 1 0 0 manager account post
// swagger:model ManagerAccount.1.0.0_ManagerAccount.post
type ManagerAccount100ManagerAccountPost struct {
	ManagerAccount100ManagerAccount

	// This property is used with a PATCH or PUT to write the password for the account.  This property is null on a GET.
	// Required: true
	Password *string `json:"Password"`

	// This property contains the Role for this account.
	// Required: true
	RoleID *string `json:"RoleId"`

	// This property contains the user name for the account.
	// Required: true
	UserName *string `json:"UserName"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ManagerAccount100ManagerAccountPost) UnmarshalJSON(raw []byte) error {

	var aO0 ManagerAccount100ManagerAccount
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagerAccount100ManagerAccount = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ManagerAccount100ManagerAccountPost) MarshalJSON() ([]byte, error) {
	var _parts [][]byte

	aO0, err := swag.WriteJSON(m.ManagerAccount100ManagerAccount)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this manager account 1 0 0 manager account post
func (m *ManagerAccount100ManagerAccountPost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.ManagerAccount100ManagerAccount.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ManagerAccount100ManagerAccountPost) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("Password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *ManagerAccount100ManagerAccountPost) validateRoleID(formats strfmt.Registry) error {

	if err := validate.Required("RoleId", "body", m.RoleID); err != nil {
		return err
	}

	return nil
}

func (m *ManagerAccount100ManagerAccountPost) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("UserName", "body", m.UserName); err != nil {
		return err
	}

	return nil
}
