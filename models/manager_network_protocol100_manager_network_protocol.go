package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// ManagerNetworkProtocol100ManagerNetworkProtocol This resource is used to obtain or modify the network services managed by a given manager.
// swagger:model ManagerNetworkProtocol.1.0.0_ManagerNetworkProtocol
type ManagerNetworkProtocol100ManagerNetworkProtocol struct {

	// at odata context
	// Read Only: true
	AtOdataContext strfmt.URI `json:"@odata.context,omitempty"`

	// at odata id
	// Read Only: true
	AtOdataID strfmt.URI `json:"@odata.id,omitempty"`

	// at odata type
	// Read Only: true
	AtOdataType string `json:"@odata.type,omitempty"`

	// Provides a description of this resource and is used for commonality  in the schema definitions.
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// This is the fully qualified domain name for the manager obtained by DNS including the host name and top-level domain name.
	// Read Only: true
	FQDN string `json:"FQDN,omitempty"`

	// Settings for this Manager's HTTP protocol support
	// Read Only: true
	HTTP *ManagerNetworkProtocol100Protocol `json:"HTTP,omitempty"`

	// Settings for this Manager's HTTPS protocol support
	// Read Only: true
	HTTPS *ManagerNetworkProtocol100Protocol `json:"HTTPS,omitempty"`

	// The DNS Host Name of this manager, without any domain information
	// Read Only: true
	HostName string `json:"HostName,omitempty"`

	// Settings for this Manager's IPMI-over-LAN protocol support
	// Read Only: true
	IPMI *ManagerNetworkProtocol100Protocol `json:"IPMI,omitempty"`

	// Uniquely identifies the resource within the collection of like resources.
	// Read Only: true
	ID string `json:"Id,omitempty"`

	// Settings for this Manager's KVM-IP protocol support
	// Read Only: true
	KVMIP *ManagerNetworkProtocol100Protocol `json:"KVMIP,omitempty"`

	// The name of the resource or array element.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	Oem ResourceOem `json:"Oem,omitempty"`

	// Settings for this Manager's SNMP support
	// Read Only: true
	SNMP *ManagerNetworkProtocol100Protocol `json:"SNMP,omitempty"`

	// Settings for this Manager's SSDP support
	// Read Only: true
	SSDP *ManagerNetworkProtocol100SSDProtocol `json:"SSDP,omitempty"`

	// Settings for this Manager's SSH (Secure Shell) protocol support
	// Read Only: true
	SSH *ManagerNetworkProtocol100Protocol `json:"SSH,omitempty"`

	// status
	Status *ResourceStatus `json:"Status,omitempty"`

	// Settings for this Manager's Telnet protocol support
	// Read Only: true
	Telnet *ManagerNetworkProtocol100Protocol `json:"Telnet,omitempty"`

	// Settings for this Manager's Virtual Media support
	// Read Only: true
	VirtualMedia *ManagerNetworkProtocol100Protocol `json:"VirtualMedia,omitempty"`
}

// Validate validates this manager network protocol 1 0 0 manager network protocol
func (m *ManagerNetworkProtocol100ManagerNetworkProtocol) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHTTP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHTTPS(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIPMI(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKVMIP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSNMP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSSDP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSSH(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTelnet(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVirtualMedia(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ManagerNetworkProtocol100ManagerNetworkProtocol) validateHTTP(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTP) { // not required
		return nil
	}

	if m.HTTP != nil {

		if err := m.HTTP.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ManagerNetworkProtocol100ManagerNetworkProtocol) validateHTTPS(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPS) { // not required
		return nil
	}

	if m.HTTPS != nil {

		if err := m.HTTPS.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ManagerNetworkProtocol100ManagerNetworkProtocol) validateIPMI(formats strfmt.Registry) error {

	if swag.IsZero(m.IPMI) { // not required
		return nil
	}

	if m.IPMI != nil {

		if err := m.IPMI.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ManagerNetworkProtocol100ManagerNetworkProtocol) validateKVMIP(formats strfmt.Registry) error {

	if swag.IsZero(m.KVMIP) { // not required
		return nil
	}

	if m.KVMIP != nil {

		if err := m.KVMIP.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ManagerNetworkProtocol100ManagerNetworkProtocol) validateSNMP(formats strfmt.Registry) error {

	if swag.IsZero(m.SNMP) { // not required
		return nil
	}

	if m.SNMP != nil {

		if err := m.SNMP.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ManagerNetworkProtocol100ManagerNetworkProtocol) validateSSDP(formats strfmt.Registry) error {

	if swag.IsZero(m.SSDP) { // not required
		return nil
	}

	if m.SSDP != nil {

		if err := m.SSDP.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ManagerNetworkProtocol100ManagerNetworkProtocol) validateSSH(formats strfmt.Registry) error {

	if swag.IsZero(m.SSH) { // not required
		return nil
	}

	if m.SSH != nil {

		if err := m.SSH.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ManagerNetworkProtocol100ManagerNetworkProtocol) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {

		if err := m.Status.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ManagerNetworkProtocol100ManagerNetworkProtocol) validateTelnet(formats strfmt.Registry) error {

	if swag.IsZero(m.Telnet) { // not required
		return nil
	}

	if m.Telnet != nil {

		if err := m.Telnet.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ManagerNetworkProtocol100ManagerNetworkProtocol) validateVirtualMedia(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualMedia) { // not required
		return nil
	}

	if m.VirtualMedia != nil {

		if err := m.VirtualMedia.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
