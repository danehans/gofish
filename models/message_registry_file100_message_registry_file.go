package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// MessageRegistryFile100MessageRegistryFile This is the schema definition for the Schema File locator resource.
// swagger:model MessageRegistryFile.1.0.0_MessageRegistryFile
type MessageRegistryFile100MessageRegistryFile struct {

	// at odata context
	// Read Only: true
	AtOdataContext strfmt.URI `json:"@odata.context,omitempty"`

	// at odata id
	// Read Only: true
	AtOdataID strfmt.URI `json:"@odata.id,omitempty"`

	// at odata type
	// Read Only: true
	AtOdataType string `json:"@odata.type,omitempty"`

	// Provides a description of this resource and is used for commonality  in the schema definitions.
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// Uniquely identifies the resource within the collection of like resources.
	// Read Only: true
	ID string `json:"Id,omitempty"`

	// Language codes for the schemas available.
	// Required: true
	// Read Only: true
	Languages []string `json:"Languages"`

	// Location information for this schema file.
	// Required: true
	// Read Only: true
	Location []*MessageRegistryFile100Location `json:"Location"`

	// The name of the resource or array element.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	Oem ResourceOem `json:"Oem,omitempty"`

	// The Registry Name, Major and Minor version used in MessageID construction.
	// Required: true
	// Read Only: true
	Registry string `json:"Registry"`
}

// Validate validates this message registry file 1 0 0 message registry file
func (m *MessageRegistryFile100MessageRegistryFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLanguages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegistry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MessageRegistryFile100MessageRegistryFile) validateLanguages(formats strfmt.Registry) error {

	if err := validate.Required("Languages", "body", m.Languages); err != nil {
		return err
	}

	return nil
}

func (m *MessageRegistryFile100MessageRegistryFile) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("Location", "body", m.Location); err != nil {
		return err
	}

	for i := 0; i < len(m.Location); i++ {

		if swag.IsZero(m.Location[i]) { // not required
			continue
		}

		if m.Location[i] != nil {

			if err := m.Location[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *MessageRegistryFile100MessageRegistryFile) validateRegistry(formats strfmt.Registry) error {

	if err := validate.RequiredString("Registry", "body", string(m.Registry)); err != nil {
		return err
	}

	return nil
}
