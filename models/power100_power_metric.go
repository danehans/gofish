package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Power100PowerMetric power 1 0 0 power metric
// swagger:model Power.1.0.0_PowerMetric
type Power100PowerMetric struct {

	// The average power level over the measurement window (the last IntervalInMin minutes).
	// Read Only: true
	// Minimum: 0
	AverageConsumedWatts float64 `json:"AverageConsumedWatts,omitempty"`

	// The time interval (or window) in which the PowerMetrics are measured over.
	// Read Only: true
	// Minimum: 0
	IntervalInMin float64 `json:"IntervalInMin,omitempty"`

	// The highest power consumption level that has occured over the measurement window (the last IntervalInMin minutes).
	// Read Only: true
	// Minimum: 0
	MaxConsumedWatts float64 `json:"MaxConsumedWatts,omitempty"`

	// The lowest power consumption level over the measurement window (the last IntervalInMin minutes).
	// Read Only: true
	// Minimum: 0
	MinConsumedWatts float64 `json:"MinConsumedWatts,omitempty"`
}

// Validate validates this power 1 0 0 power metric
func (m *Power100PowerMetric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAverageConsumedWatts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIntervalInMin(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMaxConsumedWatts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMinConsumedWatts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Power100PowerMetric) validateAverageConsumedWatts(formats strfmt.Registry) error {

	if swag.IsZero(m.AverageConsumedWatts) { // not required
		return nil
	}

	if err := validate.Minimum("AverageConsumedWatts", "body", float64(m.AverageConsumedWatts), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Power100PowerMetric) validateIntervalInMin(formats strfmt.Registry) error {

	if swag.IsZero(m.IntervalInMin) { // not required
		return nil
	}

	if err := validate.Minimum("IntervalInMin", "body", float64(m.IntervalInMin), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Power100PowerMetric) validateMaxConsumedWatts(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxConsumedWatts) { // not required
		return nil
	}

	if err := validate.Minimum("MaxConsumedWatts", "body", float64(m.MaxConsumedWatts), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Power100PowerMetric) validateMinConsumedWatts(formats strfmt.Registry) error {

	if swag.IsZero(m.MinConsumedWatts) { // not required
		return nil
	}

	if err := validate.Minimum("MinConsumedWatts", "body", float64(m.MinConsumedWatts), 0, false); err != nil {
		return err
	}

	return nil
}
