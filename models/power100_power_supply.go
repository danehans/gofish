package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Power100PowerSupply Details of a power supplies associated with this system or device
// swagger:model Power.1.0.0_PowerSupply
type Power100PowerSupply struct {

	// The firmware version for this Power Supply
	// Read Only: true
	FirmwareVersion string `json:"FirmwareVersion,omitempty"`

	// The average power output of this Power Supply
	// Read Only: true
	// Minimum: 0
	LastPowerOutputWatts float64 `json:"LastPowerOutputWatts,omitempty"`

	// The line input voltage at which the Power Supply is operating
	// Read Only: true
	LineInputVoltage float64 `json:"LineInputVoltage,omitempty"`

	// The line voltage type supported as an input to this Power Supply
	// Read Only: true
	LineInputVoltageType string `json:"LineInputVoltageType,omitempty"`

	// This is the identifier for the member within the collection.
	MemberID string `json:"MemberId,omitempty"`

	// The model number for this Power Supply
	// Read Only: true
	Model string `json:"Model,omitempty"`

	// The name of the Power Supply
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	Oem ResourceOem `json:"Oem,omitempty"`

	// The part number for this Power Supply
	// Read Only: true
	PartNumber string `json:"PartNumber,omitempty"`

	// The maximum capacity of this Power Supply
	// Read Only: true
	// Minimum: 0
	PowerCapacityWatts float64 `json:"PowerCapacityWatts,omitempty"`

	// The Power Supply type (AC or DC)
	// Read Only: true
	PowerSupplyType string `json:"PowerSupplyType,omitempty"`

	// This structure is used to show redundancy for fans.  The Component ids will reference the members of the redundancy groups.
	// Read Only: true
	Redundancy []*Odata400IDRef `json:"Redundancy"`

	// redundancy at odata count
	// Read Only: true
	RedundancyAtOdataCount float64 `json:"Redundancy@odata.count,omitempty"`

	// redundancy at odata navigation link
	RedundancyAtOdataNavigationLink *Odata400IDRef `json:"Redundancy@odata.navigationLink,omitempty"`

	// The ID(s) of the resources associated with this Power Limit
	RelatedItem []*Odata400IDRef `json:"RelatedItem"`

	// related item at odata count
	// Read Only: true
	RelatedItemAtOdataCount float64 `json:"RelatedItem@odata.count,omitempty"`

	// related item at odata navigation link
	RelatedItemAtOdataNavigationLink *Odata400IDRef `json:"RelatedItem@odata.navigationLink,omitempty"`

	// The serial number for this Power Supply
	// Read Only: true
	SerialNumber string `json:"SerialNumber,omitempty"`

	// The spare part number for this Power Supply
	// Read Only: true
	SparePartNumber string `json:"SparePartNumber,omitempty"`

	// status
	Status *ResourceStatus `json:"Status,omitempty"`
}

// Validate validates this power 1 0 0 power supply
func (m *Power100PowerSupply) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastPowerOutputWatts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLineInputVoltageType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePowerCapacityWatts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePowerSupplyType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRedundancy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRedundancyAtOdataNavigationLink(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRelatedItem(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRelatedItemAtOdataNavigationLink(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Power100PowerSupply) validateLastPowerOutputWatts(formats strfmt.Registry) error {

	if swag.IsZero(m.LastPowerOutputWatts) { // not required
		return nil
	}

	if err := validate.Minimum("LastPowerOutputWatts", "body", float64(m.LastPowerOutputWatts), 0, false); err != nil {
		return err
	}

	return nil
}

var power100PowerSupplyTypeLineInputVoltageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","ACLowLine","ACMidLine","ACHighLine","DCNeg48V","DC480V"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		power100PowerSupplyTypeLineInputVoltageTypePropEnum = append(power100PowerSupplyTypeLineInputVoltageTypePropEnum, v)
	}
}

const (
	// Power100PowerSupplyLineInputVoltageTypeUnknown captures enum value "Unknown"
	Power100PowerSupplyLineInputVoltageTypeUnknown string = "Unknown"
	// Power100PowerSupplyLineInputVoltageTypeACLOWLine captures enum value "ACLowLine"
	Power100PowerSupplyLineInputVoltageTypeACLOWLine string = "ACLowLine"
	// Power100PowerSupplyLineInputVoltageTypeACMidLine captures enum value "ACMidLine"
	Power100PowerSupplyLineInputVoltageTypeACMidLine string = "ACMidLine"
	// Power100PowerSupplyLineInputVoltageTypeACHighLine captures enum value "ACHighLine"
	Power100PowerSupplyLineInputVoltageTypeACHighLine string = "ACHighLine"
	// Power100PowerSupplyLineInputVoltageTypeDCNeg48V captures enum value "DCNeg48V"
	Power100PowerSupplyLineInputVoltageTypeDCNeg48V string = "DCNeg48V"
	// Power100PowerSupplyLineInputVoltageTypeDC480V captures enum value "DC480V"
	Power100PowerSupplyLineInputVoltageTypeDC480V string = "DC480V"
)

// prop value enum
func (m *Power100PowerSupply) validateLineInputVoltageTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, power100PowerSupplyTypeLineInputVoltageTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Power100PowerSupply) validateLineInputVoltageType(formats strfmt.Registry) error {

	if swag.IsZero(m.LineInputVoltageType) { // not required
		return nil
	}

	// value enum
	if err := m.validateLineInputVoltageTypeEnum("LineInputVoltageType", "body", m.LineInputVoltageType); err != nil {
		return err
	}

	return nil
}

func (m *Power100PowerSupply) validatePowerCapacityWatts(formats strfmt.Registry) error {

	if swag.IsZero(m.PowerCapacityWatts) { // not required
		return nil
	}

	if err := validate.Minimum("PowerCapacityWatts", "body", float64(m.PowerCapacityWatts), 0, false); err != nil {
		return err
	}

	return nil
}

var power100PowerSupplyTypePowerSupplyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","AC","DC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		power100PowerSupplyTypePowerSupplyTypePropEnum = append(power100PowerSupplyTypePowerSupplyTypePropEnum, v)
	}
}

const (
	// Power100PowerSupplyPowerSupplyTypeUnknown captures enum value "Unknown"
	Power100PowerSupplyPowerSupplyTypeUnknown string = "Unknown"
	// Power100PowerSupplyPowerSupplyTypeAC captures enum value "AC"
	Power100PowerSupplyPowerSupplyTypeAC string = "AC"
	// Power100PowerSupplyPowerSupplyTypeDC captures enum value "DC"
	Power100PowerSupplyPowerSupplyTypeDC string = "DC"
)

// prop value enum
func (m *Power100PowerSupply) validatePowerSupplyTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, power100PowerSupplyTypePowerSupplyTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Power100PowerSupply) validatePowerSupplyType(formats strfmt.Registry) error {

	if swag.IsZero(m.PowerSupplyType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePowerSupplyTypeEnum("PowerSupplyType", "body", m.PowerSupplyType); err != nil {
		return err
	}

	return nil
}

func (m *Power100PowerSupply) validateRedundancy(formats strfmt.Registry) error {

	if swag.IsZero(m.Redundancy) { // not required
		return nil
	}

	for i := 0; i < len(m.Redundancy); i++ {

		if swag.IsZero(m.Redundancy[i]) { // not required
			continue
		}

		if m.Redundancy[i] != nil {

			if err := m.Redundancy[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Power100PowerSupply) validateRedundancyAtOdataNavigationLink(formats strfmt.Registry) error {

	if swag.IsZero(m.RedundancyAtOdataNavigationLink) { // not required
		return nil
	}

	if m.RedundancyAtOdataNavigationLink != nil {

		if err := m.RedundancyAtOdataNavigationLink.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Power100PowerSupply) validateRelatedItem(formats strfmt.Registry) error {

	if swag.IsZero(m.RelatedItem) { // not required
		return nil
	}

	for i := 0; i < len(m.RelatedItem); i++ {

		if swag.IsZero(m.RelatedItem[i]) { // not required
			continue
		}

		if m.RelatedItem[i] != nil {

			if err := m.RelatedItem[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Power100PowerSupply) validateRelatedItemAtOdataNavigationLink(formats strfmt.Registry) error {

	if swag.IsZero(m.RelatedItemAtOdataNavigationLink) { // not required
		return nil
	}

	if m.RelatedItemAtOdataNavigationLink != nil {

		if err := m.RelatedItemAtOdataNavigationLink.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Power100PowerSupply) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {

		if err := m.Status.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
