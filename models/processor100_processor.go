package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Processor100Processor This is the schema definition for the Processor resource.  It represents the properties of a processor attached to a System.
// swagger:model Processor.1.0.0_Processor
type Processor100Processor struct {

	// at odata context
	// Read Only: true
	AtOdataContext strfmt.URI `json:"@odata.context,omitempty"`

	// at odata id
	// Read Only: true
	AtOdataID strfmt.URI `json:"@odata.id,omitempty"`

	// at odata type
	// Read Only: true
	AtOdataType string `json:"@odata.type,omitempty"`

	// Provides a description of this resource and is used for commonality  in the schema definitions.
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// Uniquely identifies the resource within the collection of like resources.
	// Read Only: true
	ID string `json:"Id,omitempty"`

	// The instruction set of the processor
	// Read Only: true
	InstructionSet string `json:"InstructionSet,omitempty"`

	// The processor manufacturer
	// Read Only: true
	Manufacturer string `json:"Manufacturer,omitempty"`

	// The maximum clock speed of the processor
	// Read Only: true
	MaxSpeedMHz float64 `json:"MaxSpeedMHz,omitempty"`

	// The product model number of this device
	// Read Only: true
	Model string `json:"Model,omitempty"`

	// The name of the resource or array element.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	Oem ResourceOem `json:"Oem,omitempty"`

	// The architecture of the processor
	// Read Only: true
	ProcessorArchitecture string `json:"ProcessorArchitecture,omitempty"`

	// Identification information for this processor.
	ProcessorID *Processor100ProcessorID `json:"ProcessorId,omitempty"`

	// The type of processor
	// Read Only: true
	ProcessorType string `json:"ProcessorType,omitempty"`

	// The socket or location of the processor
	// Read Only: true
	Socket string `json:"Socket,omitempty"`

	// status
	Status *ResourceStatus `json:"Status,omitempty"`

	// The total number of cores contained in this processor
	// Read Only: true
	TotalCores float64 `json:"TotalCores,omitempty"`

	// The total number of execution threads supported by this processor
	// Read Only: true
	TotalThreads float64 `json:"TotalThreads,omitempty"`
}

// Validate validates this processor 1 0 0 processor
func (m *Processor100Processor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstructionSet(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProcessorArchitecture(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProcessorID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProcessorType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var processor100ProcessorTypeInstructionSetPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["x86","x86-64","IA-64","ARM-A32","ARM-A64","MIPS32","MIPS64","OEM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		processor100ProcessorTypeInstructionSetPropEnum = append(processor100ProcessorTypeInstructionSetPropEnum, v)
	}
}

const (
	// Processor100ProcessorInstructionSetX86 captures enum value "x86"
	Processor100ProcessorInstructionSetX86 string = "x86"
	// Processor100ProcessorInstructionSetX8664 captures enum value "x86-64"
	Processor100ProcessorInstructionSetX8664 string = "x86-64"
	// Processor100ProcessorInstructionSetIA64 captures enum value "IA-64"
	Processor100ProcessorInstructionSetIA64 string = "IA-64"
	// Processor100ProcessorInstructionSetARMA32 captures enum value "ARM-A32"
	Processor100ProcessorInstructionSetARMA32 string = "ARM-A32"
	// Processor100ProcessorInstructionSetARMA64 captures enum value "ARM-A64"
	Processor100ProcessorInstructionSetARMA64 string = "ARM-A64"
	// Processor100ProcessorInstructionSetMIPS32 captures enum value "MIPS32"
	Processor100ProcessorInstructionSetMIPS32 string = "MIPS32"
	// Processor100ProcessorInstructionSetMIPS64 captures enum value "MIPS64"
	Processor100ProcessorInstructionSetMIPS64 string = "MIPS64"
	// Processor100ProcessorInstructionSetOEM captures enum value "OEM"
	Processor100ProcessorInstructionSetOEM string = "OEM"
)

// prop value enum
func (m *Processor100Processor) validateInstructionSetEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, processor100ProcessorTypeInstructionSetPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Processor100Processor) validateInstructionSet(formats strfmt.Registry) error {

	if swag.IsZero(m.InstructionSet) { // not required
		return nil
	}

	// value enum
	if err := m.validateInstructionSetEnum("InstructionSet", "body", m.InstructionSet); err != nil {
		return err
	}

	return nil
}

var processor100ProcessorTypeProcessorArchitecturePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["x86","IA-64","ARM","MIPS","OEM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		processor100ProcessorTypeProcessorArchitecturePropEnum = append(processor100ProcessorTypeProcessorArchitecturePropEnum, v)
	}
}

const (
	// Processor100ProcessorProcessorArchitectureX86 captures enum value "x86"
	Processor100ProcessorProcessorArchitectureX86 string = "x86"
	// Processor100ProcessorProcessorArchitectureIA64 captures enum value "IA-64"
	Processor100ProcessorProcessorArchitectureIA64 string = "IA-64"
	// Processor100ProcessorProcessorArchitectureARM captures enum value "ARM"
	Processor100ProcessorProcessorArchitectureARM string = "ARM"
	// Processor100ProcessorProcessorArchitectureMIPS captures enum value "MIPS"
	Processor100ProcessorProcessorArchitectureMIPS string = "MIPS"
	// Processor100ProcessorProcessorArchitectureOEM captures enum value "OEM"
	Processor100ProcessorProcessorArchitectureOEM string = "OEM"
)

// prop value enum
func (m *Processor100Processor) validateProcessorArchitectureEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, processor100ProcessorTypeProcessorArchitecturePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Processor100Processor) validateProcessorArchitecture(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessorArchitecture) { // not required
		return nil
	}

	// value enum
	if err := m.validateProcessorArchitectureEnum("ProcessorArchitecture", "body", m.ProcessorArchitecture); err != nil {
		return err
	}

	return nil
}

func (m *Processor100Processor) validateProcessorID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessorID) { // not required
		return nil
	}

	if m.ProcessorID != nil {

		if err := m.ProcessorID.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var processor100ProcessorTypeProcessorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CPU","GPU","FPGA","DSP","Accelerator","OEM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		processor100ProcessorTypeProcessorTypePropEnum = append(processor100ProcessorTypeProcessorTypePropEnum, v)
	}
}

const (
	// Processor100ProcessorProcessorTypeCPU captures enum value "CPU"
	Processor100ProcessorProcessorTypeCPU string = "CPU"
	// Processor100ProcessorProcessorTypeGPU captures enum value "GPU"
	Processor100ProcessorProcessorTypeGPU string = "GPU"
	// Processor100ProcessorProcessorTypeFPGA captures enum value "FPGA"
	Processor100ProcessorProcessorTypeFPGA string = "FPGA"
	// Processor100ProcessorProcessorTypeDSP captures enum value "DSP"
	Processor100ProcessorProcessorTypeDSP string = "DSP"
	// Processor100ProcessorProcessorTypeAccelerator captures enum value "Accelerator"
	Processor100ProcessorProcessorTypeAccelerator string = "Accelerator"
	// Processor100ProcessorProcessorTypeOEM captures enum value "OEM"
	Processor100ProcessorProcessorTypeOEM string = "OEM"
)

// prop value enum
func (m *Processor100Processor) validateProcessorTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, processor100ProcessorTypeProcessorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Processor100Processor) validateProcessorType(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessorType) { // not required
		return nil
	}

	// value enum
	if err := m.validateProcessorTypeEnum("ProcessorType", "body", m.ProcessorType); err != nil {
		return err
	}

	return nil
}

func (m *Processor100Processor) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {

		if err := m.Status.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
