package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Role100Role This schema defines a user role to be used in conjunction with a manager account.
// swagger:model Role.1.0.0_Role
type Role100Role struct {

	// at odata context
	// Read Only: true
	AtOdataContext strfmt.URI `json:"@odata.context,omitempty"`

	// at odata id
	// Read Only: true
	AtOdataID strfmt.URI `json:"@odata.id,omitempty"`

	// at odata type
	// Read Only: true
	AtOdataType string `json:"@odata.type,omitempty"`

	// The redfish privileges that this role includes.
	AssignedPrivileges []string `json:"AssignedPrivileges"`

	// Provides a description of this resource and is used for commonality  in the schema definitions.
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// Uniquely identifies the resource within the collection of like resources.
	// Read Only: true
	ID string `json:"Id,omitempty"`

	// This property is used to indicate if the Role is one of the Redfish Predefined Roles vs a Custom role.
	// Read Only: true
	IsPredefined *bool `json:"IsPredefined,omitempty"`

	// The name of the resource or array element.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	Oem ResourceOem `json:"Oem,omitempty"`

	// The OEM privileges that this role includes.
	OemPrivileges []string `json:"OemPrivileges"`
}

// Validate validates this role 1 0 0 role
func (m *Role100Role) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignedPrivileges(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOemPrivileges(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var role100RoleAssignedPrivilegesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Login","ConfigureManager","ConfigureUsers","ConfigureSelf","ConfigureComponents"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		role100RoleAssignedPrivilegesItemsEnum = append(role100RoleAssignedPrivilegesItemsEnum, v)
	}
}

func (m *Role100Role) validateAssignedPrivilegesItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, role100RoleAssignedPrivilegesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *Role100Role) validateAssignedPrivileges(formats strfmt.Registry) error {

	if swag.IsZero(m.AssignedPrivileges) { // not required
		return nil
	}

	for i := 0; i < len(m.AssignedPrivileges); i++ {

		// value enum
		if err := m.validateAssignedPrivilegesItemsEnum("AssignedPrivileges"+"."+strconv.Itoa(i), "body", m.AssignedPrivileges[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *Role100Role) validateOemPrivileges(formats strfmt.Registry) error {

	if swag.IsZero(m.OemPrivileges) { // not required
		return nil
	}

	return nil
}
