package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SerialInterface100SerialInterface This schema defines an asynchronous serial interface resource.
// swagger:model SerialInterface.1.0.0_SerialInterface
type SerialInterface100SerialInterface struct {

	// at odata context
	// Read Only: true
	AtOdataContext strfmt.URI `json:"@odata.context,omitempty"`

	// at odata id
	// Read Only: true
	AtOdataID strfmt.URI `json:"@odata.id,omitempty"`

	// at odata type
	// Read Only: true
	AtOdataType string `json:"@odata.type,omitempty"`

	// The receive and transmit rate of data flow, typically in bits-per-second (bps), over the serial connection.
	BitRate string `json:"BitRate,omitempty"`

	// The type of connector used for this interface.
	// Read Only: true
	ConnectorType string `json:"ConnectorType,omitempty"`

	// The number of data bits that will follow the start bit over the serial connection.
	DataBits string `json:"DataBits,omitempty"`

	// Provides a description of this resource and is used for commonality  in the schema definitions.
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// The type of flow control, if any, that will be imposed on the serial connection.
	FlowControl string `json:"FlowControl,omitempty"`

	// Uniquely identifies the resource within the collection of like resources.
	// Read Only: true
	ID string `json:"Id,omitempty"`

	// This indicates whether this interface is enabled.
	InterfaceEnabled bool `json:"InterfaceEnabled,omitempty"`

	// The name of the resource or array element.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	Oem ResourceOem `json:"Oem,omitempty"`

	// The type of parity used by the sender and receiver in order to detect errors over the serial connection.
	Parity string `json:"Parity,omitempty"`

	// The physical pin configuration needed for a serial connector.
	// Read Only: true
	PinOut string `json:"PinOut,omitempty"`

	// The type of signal used for the communication connection - RS232 or RS485.
	// Read Only: true
	SignalType string `json:"SignalType,omitempty"`

	// The period of time before the next start bit is transmitted.
	StopBits string `json:"StopBits,omitempty"`
}

// Validate validates this serial interface 1 0 0 serial interface
func (m *SerialInterface100SerialInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBitRate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateConnectorType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDataBits(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFlowControl(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePinOut(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSignalType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStopBits(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serialInterface100SerialInterfaceTypeBitRatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1200","2400","4800","9600","19200","38400","57600","115200","230400"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serialInterface100SerialInterfaceTypeBitRatePropEnum = append(serialInterface100SerialInterfaceTypeBitRatePropEnum, v)
	}
}

const (
	// SerialInterface100SerialInterfaceBitRateNr1200 captures enum value "1200"
	SerialInterface100SerialInterfaceBitRateNr1200 string = "1200"
	// SerialInterface100SerialInterfaceBitRateNr2400 captures enum value "2400"
	SerialInterface100SerialInterfaceBitRateNr2400 string = "2400"
	// SerialInterface100SerialInterfaceBitRateNr4800 captures enum value "4800"
	SerialInterface100SerialInterfaceBitRateNr4800 string = "4800"
	// SerialInterface100SerialInterfaceBitRateNr9600 captures enum value "9600"
	SerialInterface100SerialInterfaceBitRateNr9600 string = "9600"
	// SerialInterface100SerialInterfaceBitRateNr19200 captures enum value "19200"
	SerialInterface100SerialInterfaceBitRateNr19200 string = "19200"
	// SerialInterface100SerialInterfaceBitRateNr38400 captures enum value "38400"
	SerialInterface100SerialInterfaceBitRateNr38400 string = "38400"
	// SerialInterface100SerialInterfaceBitRateNr57600 captures enum value "57600"
	SerialInterface100SerialInterfaceBitRateNr57600 string = "57600"
	// SerialInterface100SerialInterfaceBitRateNr115200 captures enum value "115200"
	SerialInterface100SerialInterfaceBitRateNr115200 string = "115200"
	// SerialInterface100SerialInterfaceBitRateNr230400 captures enum value "230400"
	SerialInterface100SerialInterfaceBitRateNr230400 string = "230400"
)

// prop value enum
func (m *SerialInterface100SerialInterface) validateBitRateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serialInterface100SerialInterfaceTypeBitRatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SerialInterface100SerialInterface) validateBitRate(formats strfmt.Registry) error {

	if swag.IsZero(m.BitRate) { // not required
		return nil
	}

	// value enum
	if err := m.validateBitRateEnum("BitRate", "body", m.BitRate); err != nil {
		return err
	}

	return nil
}

var serialInterface100SerialInterfaceTypeConnectorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RJ45","RJ11","DB9 Female","DB9 Male","DB25 Female","DB25 Male","USB","mUSB","uUSB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serialInterface100SerialInterfaceTypeConnectorTypePropEnum = append(serialInterface100SerialInterfaceTypeConnectorTypePropEnum, v)
	}
}

const (
	// SerialInterface100SerialInterfaceConnectorTypeRJ45 captures enum value "RJ45"
	SerialInterface100SerialInterfaceConnectorTypeRJ45 string = "RJ45"
	// SerialInterface100SerialInterfaceConnectorTypeRJ11 captures enum value "RJ11"
	SerialInterface100SerialInterfaceConnectorTypeRJ11 string = "RJ11"
	// SerialInterface100SerialInterfaceConnectorTypeDB9Female captures enum value "DB9 Female"
	SerialInterface100SerialInterfaceConnectorTypeDB9Female string = "DB9 Female"
	// SerialInterface100SerialInterfaceConnectorTypeDB9Male captures enum value "DB9 Male"
	SerialInterface100SerialInterfaceConnectorTypeDB9Male string = "DB9 Male"
	// SerialInterface100SerialInterfaceConnectorTypeDB25Female captures enum value "DB25 Female"
	SerialInterface100SerialInterfaceConnectorTypeDB25Female string = "DB25 Female"
	// SerialInterface100SerialInterfaceConnectorTypeDB25Male captures enum value "DB25 Male"
	SerialInterface100SerialInterfaceConnectorTypeDB25Male string = "DB25 Male"
	// SerialInterface100SerialInterfaceConnectorTypeUSB captures enum value "USB"
	SerialInterface100SerialInterfaceConnectorTypeUSB string = "USB"
	// SerialInterface100SerialInterfaceConnectorTypeMUSB captures enum value "mUSB"
	SerialInterface100SerialInterfaceConnectorTypeMUSB string = "mUSB"
	// SerialInterface100SerialInterfaceConnectorTypeUUSB captures enum value "uUSB"
	SerialInterface100SerialInterfaceConnectorTypeUUSB string = "uUSB"
)

// prop value enum
func (m *SerialInterface100SerialInterface) validateConnectorTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serialInterface100SerialInterfaceTypeConnectorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SerialInterface100SerialInterface) validateConnectorType(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectorType) { // not required
		return nil
	}

	// value enum
	if err := m.validateConnectorTypeEnum("ConnectorType", "body", m.ConnectorType); err != nil {
		return err
	}

	return nil
}

var serialInterface100SerialInterfaceTypeDataBitsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["5","6","7","8"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serialInterface100SerialInterfaceTypeDataBitsPropEnum = append(serialInterface100SerialInterfaceTypeDataBitsPropEnum, v)
	}
}

const (
	// SerialInterface100SerialInterfaceDataBitsNr5 captures enum value "5"
	SerialInterface100SerialInterfaceDataBitsNr5 string = "5"
	// SerialInterface100SerialInterfaceDataBitsNr6 captures enum value "6"
	SerialInterface100SerialInterfaceDataBitsNr6 string = "6"
	// SerialInterface100SerialInterfaceDataBitsNr7 captures enum value "7"
	SerialInterface100SerialInterfaceDataBitsNr7 string = "7"
	// SerialInterface100SerialInterfaceDataBitsNr8 captures enum value "8"
	SerialInterface100SerialInterfaceDataBitsNr8 string = "8"
)

// prop value enum
func (m *SerialInterface100SerialInterface) validateDataBitsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serialInterface100SerialInterfaceTypeDataBitsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SerialInterface100SerialInterface) validateDataBits(formats strfmt.Registry) error {

	if swag.IsZero(m.DataBits) { // not required
		return nil
	}

	// value enum
	if err := m.validateDataBitsEnum("DataBits", "body", m.DataBits); err != nil {
		return err
	}

	return nil
}

var serialInterface100SerialInterfaceTypeFlowControlPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Software","Hardware"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serialInterface100SerialInterfaceTypeFlowControlPropEnum = append(serialInterface100SerialInterfaceTypeFlowControlPropEnum, v)
	}
}

const (
	// SerialInterface100SerialInterfaceFlowControlNone captures enum value "None"
	SerialInterface100SerialInterfaceFlowControlNone string = "None"
	// SerialInterface100SerialInterfaceFlowControlSoftware captures enum value "Software"
	SerialInterface100SerialInterfaceFlowControlSoftware string = "Software"
	// SerialInterface100SerialInterfaceFlowControlHardware captures enum value "Hardware"
	SerialInterface100SerialInterfaceFlowControlHardware string = "Hardware"
)

// prop value enum
func (m *SerialInterface100SerialInterface) validateFlowControlEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serialInterface100SerialInterfaceTypeFlowControlPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SerialInterface100SerialInterface) validateFlowControl(formats strfmt.Registry) error {

	if swag.IsZero(m.FlowControl) { // not required
		return nil
	}

	// value enum
	if err := m.validateFlowControlEnum("FlowControl", "body", m.FlowControl); err != nil {
		return err
	}

	return nil
}

var serialInterface100SerialInterfaceTypeParityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Even","Odd","Mark","Space"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serialInterface100SerialInterfaceTypeParityPropEnum = append(serialInterface100SerialInterfaceTypeParityPropEnum, v)
	}
}

const (
	// SerialInterface100SerialInterfaceParityNone captures enum value "None"
	SerialInterface100SerialInterfaceParityNone string = "None"
	// SerialInterface100SerialInterfaceParityEven captures enum value "Even"
	SerialInterface100SerialInterfaceParityEven string = "Even"
	// SerialInterface100SerialInterfaceParityOdd captures enum value "Odd"
	SerialInterface100SerialInterfaceParityOdd string = "Odd"
	// SerialInterface100SerialInterfaceParityMark captures enum value "Mark"
	SerialInterface100SerialInterfaceParityMark string = "Mark"
	// SerialInterface100SerialInterfaceParitySpace captures enum value "Space"
	SerialInterface100SerialInterfaceParitySpace string = "Space"
)

// prop value enum
func (m *SerialInterface100SerialInterface) validateParityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serialInterface100SerialInterfaceTypeParityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SerialInterface100SerialInterface) validateParity(formats strfmt.Registry) error {

	if swag.IsZero(m.Parity) { // not required
		return nil
	}

	// value enum
	if err := m.validateParityEnum("Parity", "body", m.Parity); err != nil {
		return err
	}

	return nil
}

var serialInterface100SerialInterfaceTypePinOutPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Cisco","Cyclades","Digi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serialInterface100SerialInterfaceTypePinOutPropEnum = append(serialInterface100SerialInterfaceTypePinOutPropEnum, v)
	}
}

const (
	// SerialInterface100SerialInterfacePinOutCisco captures enum value "Cisco"
	SerialInterface100SerialInterfacePinOutCisco string = "Cisco"
	// SerialInterface100SerialInterfacePinOutCyclades captures enum value "Cyclades"
	SerialInterface100SerialInterfacePinOutCyclades string = "Cyclades"
	// SerialInterface100SerialInterfacePinOutDigi captures enum value "Digi"
	SerialInterface100SerialInterfacePinOutDigi string = "Digi"
)

// prop value enum
func (m *SerialInterface100SerialInterface) validatePinOutEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serialInterface100SerialInterfaceTypePinOutPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SerialInterface100SerialInterface) validatePinOut(formats strfmt.Registry) error {

	if swag.IsZero(m.PinOut) { // not required
		return nil
	}

	// value enum
	if err := m.validatePinOutEnum("PinOut", "body", m.PinOut); err != nil {
		return err
	}

	return nil
}

var serialInterface100SerialInterfaceTypeSignalTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Rs232","Rs485"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serialInterface100SerialInterfaceTypeSignalTypePropEnum = append(serialInterface100SerialInterfaceTypeSignalTypePropEnum, v)
	}
}

const (
	// SerialInterface100SerialInterfaceSignalTypeRs232 captures enum value "Rs232"
	SerialInterface100SerialInterfaceSignalTypeRs232 string = "Rs232"
	// SerialInterface100SerialInterfaceSignalTypeRs485 captures enum value "Rs485"
	SerialInterface100SerialInterfaceSignalTypeRs485 string = "Rs485"
)

// prop value enum
func (m *SerialInterface100SerialInterface) validateSignalTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serialInterface100SerialInterfaceTypeSignalTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SerialInterface100SerialInterface) validateSignalType(formats strfmt.Registry) error {

	if swag.IsZero(m.SignalType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSignalTypeEnum("SignalType", "body", m.SignalType); err != nil {
		return err
	}

	return nil
}

var serialInterface100SerialInterfaceTypeStopBitsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1","2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serialInterface100SerialInterfaceTypeStopBitsPropEnum = append(serialInterface100SerialInterfaceTypeStopBitsPropEnum, v)
	}
}

const (
	// SerialInterface100SerialInterfaceStopBitsNr1 captures enum value "1"
	SerialInterface100SerialInterfaceStopBitsNr1 string = "1"
	// SerialInterface100SerialInterfaceStopBitsNr2 captures enum value "2"
	SerialInterface100SerialInterfaceStopBitsNr2 string = "2"
)

// prop value enum
func (m *SerialInterface100SerialInterface) validateStopBitsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serialInterface100SerialInterfaceTypeStopBitsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SerialInterface100SerialInterface) validateStopBits(formats strfmt.Registry) error {

	if swag.IsZero(m.StopBits) { // not required
		return nil
	}

	// value enum
	if err := m.validateStopBitsEnum("StopBits", "body", m.StopBits); err != nil {
		return err
	}

	return nil
}
