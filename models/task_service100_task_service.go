package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TaskService100TaskService This is the schema definition for the Task Service.  It represents the properties for the service itself and has links to the actual list of tasks.
// swagger:model TaskService.1.0.0_TaskService
type TaskService100TaskService struct {

	// at odata context
	// Read Only: true
	AtOdataContext strfmt.URI `json:"@odata.context,omitempty"`

	// at odata id
	// Read Only: true
	AtOdataID strfmt.URI `json:"@odata.id,omitempty"`

	// at odata type
	// Read Only: true
	AtOdataType string `json:"@odata.type,omitempty"`

	// Overwrite policy of completed tasks
	// Read Only: true
	CompletedTaskOverWritePolicy string `json:"CompletedTaskOverWritePolicy,omitempty"`

	// The current DateTime (with offset) setting that the task service is using.
	// Read Only: true
	DateTime strfmt.DateTime `json:"DateTime,omitempty"`

	// Provides a description of this resource and is used for commonality  in the schema definitions.
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// Uniquely identifies the resource within the collection of like resources.
	// Read Only: true
	ID string `json:"Id,omitempty"`

	// Send an Event upon Task State Change.
	// Read Only: true
	LifeCycleEventOnTaskStateChange *bool `json:"LifeCycleEventOnTaskStateChange,omitempty"`

	// The name of the resource or array element.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	Oem ResourceOem `json:"Oem,omitempty"`

	// This indicates whether this service is enabled.
	ServiceEnabled bool `json:"ServiceEnabled,omitempty"`

	// status
	Status *ResourceStatus `json:"Status,omitempty"`

	// References to the Tasks collection.
	// Read Only: true
	Tasks *TaskCollectionTaskCollection `json:"Tasks,omitempty"`
}

// Validate validates this task service 1 0 0 task service
func (m *TaskService100TaskService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletedTaskOverWritePolicy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTasks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var taskService100TaskServiceTypeCompletedTaskOverWritePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Manual","Oldest"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskService100TaskServiceTypeCompletedTaskOverWritePolicyPropEnum = append(taskService100TaskServiceTypeCompletedTaskOverWritePolicyPropEnum, v)
	}
}

const (
	// TaskService100TaskServiceCompletedTaskOverWritePolicyManual captures enum value "Manual"
	TaskService100TaskServiceCompletedTaskOverWritePolicyManual string = "Manual"
	// TaskService100TaskServiceCompletedTaskOverWritePolicyOldest captures enum value "Oldest"
	TaskService100TaskServiceCompletedTaskOverWritePolicyOldest string = "Oldest"
)

// prop value enum
func (m *TaskService100TaskService) validateCompletedTaskOverWritePolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, taskService100TaskServiceTypeCompletedTaskOverWritePolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TaskService100TaskService) validateCompletedTaskOverWritePolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletedTaskOverWritePolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateCompletedTaskOverWritePolicyEnum("CompletedTaskOverWritePolicy", "body", m.CompletedTaskOverWritePolicy); err != nil {
		return err
	}

	return nil
}

func (m *TaskService100TaskService) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {

		if err := m.Status.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *TaskService100TaskService) validateTasks(formats strfmt.Registry) error {

	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	if m.Tasks != nil {

		if err := m.Tasks.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
