package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Thermal100Temperature This is the base type for addressable members of an array.
// swagger:model Thermal.1.0.0_Temperature
type Thermal100Temperature struct {

	// Below normal range but not yet fatal.
	// Read Only: true
	LowerThresholdCritical float64 `json:"LowerThresholdCritical,omitempty"`

	// Below normal range and is fatal
	// Read Only: true
	LowerThresholdFatal float64 `json:"LowerThresholdFatal,omitempty"`

	// Below normal range
	// Read Only: true
	LowerThresholdNonCritical float64 `json:"LowerThresholdNonCritical,omitempty"`

	// Maximum value for ReadingCelsius
	// Read Only: true
	MaxReadingRangeTemp float64 `json:"MaxReadingRangeTemp,omitempty"`

	// This is the identifier for the member within the collection.
	MemberID string `json:"MemberId,omitempty"`

	// Minimum value for ReadingCelsius
	// Read Only: true
	MinReadingRangeTemp float64 `json:"MinReadingRangeTemp,omitempty"`

	// Temperature sensor name.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	Oem ResourceOem `json:"Oem,omitempty"`

	// Describes the area or device to which this temperature measurement applies.
	// Read Only: true
	PhysicalContext string `json:"PhysicalContext,omitempty"`

	// Temperature
	// Read Only: true
	ReadingCelsius float64 `json:"ReadingCelsius,omitempty"`

	// Describes the areas or devices to which this temperature measurement applies.
	// Read Only: true
	RelatedItem []*Odata400IDRef `json:"RelatedItem"`

	// related item at odata count
	// Read Only: true
	RelatedItemAtOdataCount float64 `json:"RelatedItem@odata.count,omitempty"`

	// related item at odata navigation link
	RelatedItemAtOdataNavigationLink *Odata400IDRef `json:"RelatedItem@odata.navigationLink,omitempty"`

	// A numerical identifier to represent the temperature sensor
	// Read Only: true
	SensorNumber float64 `json:"SensorNumber,omitempty"`

	// status
	Status *ResourceStatus `json:"Status,omitempty"`

	// Above normal range but not yet fatal.
	// Read Only: true
	UpperThresholdCritical float64 `json:"UpperThresholdCritical,omitempty"`

	// Above normal range and is fatal
	// Read Only: true
	UpperThresholdFatal float64 `json:"UpperThresholdFatal,omitempty"`

	// Above normal range
	// Read Only: true
	UpperThresholdNonCritical float64 `json:"UpperThresholdNonCritical,omitempty"`
}

// Validate validates this thermal 1 0 0 temperature
func (m *Thermal100Temperature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePhysicalContext(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRelatedItem(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRelatedItemAtOdataNavigationLink(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var thermal100TemperatureTypePhysicalContextPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Room","Intake","Exhaust","Front","Back","Upper","Lower","CPU","GPU","Backplane","SystemBoard","PowerSupply","VoltageRegulator","StorageDevice","NetworkingDevice","ComputeBay","StorageBay","NetworkBay","ExpansionBay","PowerSupplyBay"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		thermal100TemperatureTypePhysicalContextPropEnum = append(thermal100TemperatureTypePhysicalContextPropEnum, v)
	}
}

const (
	// Thermal100TemperaturePhysicalContextRoom captures enum value "Room"
	Thermal100TemperaturePhysicalContextRoom string = "Room"
	// Thermal100TemperaturePhysicalContextIntake captures enum value "Intake"
	Thermal100TemperaturePhysicalContextIntake string = "Intake"
	// Thermal100TemperaturePhysicalContextExhaust captures enum value "Exhaust"
	Thermal100TemperaturePhysicalContextExhaust string = "Exhaust"
	// Thermal100TemperaturePhysicalContextFront captures enum value "Front"
	Thermal100TemperaturePhysicalContextFront string = "Front"
	// Thermal100TemperaturePhysicalContextBack captures enum value "Back"
	Thermal100TemperaturePhysicalContextBack string = "Back"
	// Thermal100TemperaturePhysicalContextUpper captures enum value "Upper"
	Thermal100TemperaturePhysicalContextUpper string = "Upper"
	// Thermal100TemperaturePhysicalContextLower captures enum value "Lower"
	Thermal100TemperaturePhysicalContextLower string = "Lower"
	// Thermal100TemperaturePhysicalContextCPU captures enum value "CPU"
	Thermal100TemperaturePhysicalContextCPU string = "CPU"
	// Thermal100TemperaturePhysicalContextGPU captures enum value "GPU"
	Thermal100TemperaturePhysicalContextGPU string = "GPU"
	// Thermal100TemperaturePhysicalContextBackplane captures enum value "Backplane"
	Thermal100TemperaturePhysicalContextBackplane string = "Backplane"
	// Thermal100TemperaturePhysicalContextSystemBoard captures enum value "SystemBoard"
	Thermal100TemperaturePhysicalContextSystemBoard string = "SystemBoard"
	// Thermal100TemperaturePhysicalContextPowerSupply captures enum value "PowerSupply"
	Thermal100TemperaturePhysicalContextPowerSupply string = "PowerSupply"
	// Thermal100TemperaturePhysicalContextVoltageRegulator captures enum value "VoltageRegulator"
	Thermal100TemperaturePhysicalContextVoltageRegulator string = "VoltageRegulator"
	// Thermal100TemperaturePhysicalContextStorageDevice captures enum value "StorageDevice"
	Thermal100TemperaturePhysicalContextStorageDevice string = "StorageDevice"
	// Thermal100TemperaturePhysicalContextNetworkingDevice captures enum value "NetworkingDevice"
	Thermal100TemperaturePhysicalContextNetworkingDevice string = "NetworkingDevice"
	// Thermal100TemperaturePhysicalContextComputeBay captures enum value "ComputeBay"
	Thermal100TemperaturePhysicalContextComputeBay string = "ComputeBay"
	// Thermal100TemperaturePhysicalContextStorageBay captures enum value "StorageBay"
	Thermal100TemperaturePhysicalContextStorageBay string = "StorageBay"
	// Thermal100TemperaturePhysicalContextNetworkBay captures enum value "NetworkBay"
	Thermal100TemperaturePhysicalContextNetworkBay string = "NetworkBay"
	// Thermal100TemperaturePhysicalContextExpansionBay captures enum value "ExpansionBay"
	Thermal100TemperaturePhysicalContextExpansionBay string = "ExpansionBay"
	// Thermal100TemperaturePhysicalContextPowerSupplyBay captures enum value "PowerSupplyBay"
	Thermal100TemperaturePhysicalContextPowerSupplyBay string = "PowerSupplyBay"
)

// prop value enum
func (m *Thermal100Temperature) validatePhysicalContextEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, thermal100TemperatureTypePhysicalContextPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Thermal100Temperature) validatePhysicalContext(formats strfmt.Registry) error {

	if swag.IsZero(m.PhysicalContext) { // not required
		return nil
	}

	// value enum
	if err := m.validatePhysicalContextEnum("PhysicalContext", "body", m.PhysicalContext); err != nil {
		return err
	}

	return nil
}

func (m *Thermal100Temperature) validateRelatedItem(formats strfmt.Registry) error {

	if swag.IsZero(m.RelatedItem) { // not required
		return nil
	}

	for i := 0; i < len(m.RelatedItem); i++ {

		if swag.IsZero(m.RelatedItem[i]) { // not required
			continue
		}

		if m.RelatedItem[i] != nil {

			if err := m.RelatedItem[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Thermal100Temperature) validateRelatedItemAtOdataNavigationLink(formats strfmt.Registry) error {

	if swag.IsZero(m.RelatedItemAtOdataNavigationLink) { // not required
		return nil
	}

	if m.RelatedItemAtOdataNavigationLink != nil {

		if err := m.RelatedItemAtOdataNavigationLink.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Thermal100Temperature) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {

		if err := m.Status.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
