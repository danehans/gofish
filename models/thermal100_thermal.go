package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// Thermal100Thermal This is the schema definition for the Thermal properties.  It represents the properties for Temperature and Cooling.
// swagger:model Thermal.1.0.0_Thermal
type Thermal100Thermal struct {

	// at odata context
	// Read Only: true
	AtOdataContext strfmt.URI `json:"@odata.context,omitempty"`

	// at odata id
	// Read Only: true
	AtOdataID strfmt.URI `json:"@odata.id,omitempty"`

	// at odata type
	// Read Only: true
	AtOdataType string `json:"@odata.type,omitempty"`

	// Provides a description of this resource and is used for commonality  in the schema definitions.
	// Read Only: true
	Description string `json:"Description,omitempty"`

	// This is the definition for fans.
	// Read Only: true
	Fans []*Thermal100Fan `json:"Fans"`

	// fans at odata count
	// Read Only: true
	FansAtOdataCount float64 `json:"Fans@odata.count,omitempty"`

	// fans at odata navigation link
	FansAtOdataNavigationLink *Odata400IDRef `json:"Fans@odata.navigationLink,omitempty"`

	// Uniquely identifies the resource within the collection of like resources.
	// Read Only: true
	ID string `json:"Id,omitempty"`

	// The name of the resource or array element.
	// Read Only: true
	Name string `json:"Name,omitempty"`

	// This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.
	Oem ResourceOem `json:"Oem,omitempty"`

	// This structure is used to show redundancy for fans.  The Component ids will reference the members of the redundancy groups.
	// Read Only: true
	Redundancy []*Odata400IDRef `json:"Redundancy"`

	// redundancy at odata count
	// Read Only: true
	RedundancyAtOdataCount float64 `json:"Redundancy@odata.count,omitempty"`

	// redundancy at odata navigation link
	RedundancyAtOdataNavigationLink *Odata400IDRef `json:"Redundancy@odata.navigationLink,omitempty"`

	// status
	Status *ResourceStatus `json:"Status,omitempty"`

	// This is the definition for temperature sensors.
	// Read Only: true
	Temperatures []*Thermal100Temperature `json:"Temperatures"`

	// temperatures at odata count
	// Read Only: true
	TemperaturesAtOdataCount float64 `json:"Temperatures@odata.count,omitempty"`

	// temperatures at odata navigation link
	TemperaturesAtOdataNavigationLink *Odata400IDRef `json:"Temperatures@odata.navigationLink,omitempty"`
}

// Validate validates this thermal 1 0 0 thermal
func (m *Thermal100Thermal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFans(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFansAtOdataNavigationLink(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRedundancy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRedundancyAtOdataNavigationLink(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTemperatures(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTemperaturesAtOdataNavigationLink(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Thermal100Thermal) validateFans(formats strfmt.Registry) error {

	if swag.IsZero(m.Fans) { // not required
		return nil
	}

	for i := 0; i < len(m.Fans); i++ {

		if swag.IsZero(m.Fans[i]) { // not required
			continue
		}

		if m.Fans[i] != nil {

			if err := m.Fans[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Thermal100Thermal) validateFansAtOdataNavigationLink(formats strfmt.Registry) error {

	if swag.IsZero(m.FansAtOdataNavigationLink) { // not required
		return nil
	}

	if m.FansAtOdataNavigationLink != nil {

		if err := m.FansAtOdataNavigationLink.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Thermal100Thermal) validateRedundancy(formats strfmt.Registry) error {

	if swag.IsZero(m.Redundancy) { // not required
		return nil
	}

	for i := 0; i < len(m.Redundancy); i++ {

		if swag.IsZero(m.Redundancy[i]) { // not required
			continue
		}

		if m.Redundancy[i] != nil {

			if err := m.Redundancy[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Thermal100Thermal) validateRedundancyAtOdataNavigationLink(formats strfmt.Registry) error {

	if swag.IsZero(m.RedundancyAtOdataNavigationLink) { // not required
		return nil
	}

	if m.RedundancyAtOdataNavigationLink != nil {

		if err := m.RedundancyAtOdataNavigationLink.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Thermal100Thermal) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {

		if err := m.Status.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Thermal100Thermal) validateTemperatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Temperatures) { // not required
		return nil
	}

	for i := 0; i < len(m.Temperatures); i++ {

		if swag.IsZero(m.Temperatures[i]) { // not required
			continue
		}

		if m.Temperatures[i] != nil {

			if err := m.Temperatures[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Thermal100Thermal) validateTemperaturesAtOdataNavigationLink(formats strfmt.Registry) error {

	if swag.IsZero(m.TemperaturesAtOdataNavigationLink) { // not required
		return nil
	}

	if m.TemperaturesAtOdataNavigationLink != nil {

		if err := m.TemperaturesAtOdataNavigationLink.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
